name: Publish
on:
  workflow_dispatch:
    inputs:
      version_type:
        type: choice
        description: Version type
        default: minor
        options:
        - major
        - minor
        - patch
jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup git repo
        run: |
          git config user.name $GITHUB_ACTOR
          git config user.email gh-actions-${GITHUB_ACTOR}@github.com
          git remote add gh-origin https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
      - uses: actions/setup-node@v3
        with:
          node-version: 20
          registry-url: "https://registry.npmjs.org"
      - run: npm install
      - run: npm run build
      - run: npm run test
      - name: Bump Version
        run: |
          git add dist/*
          npm version ${{ github.event.inputs.version_type }} --force -m "Version %s"
      - name: Push release commit and tag to GitHub
        id: push
        run: |
          git push gh-origin HEAD:main --tags
          echo "tag-name=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT
      - name: Publish to npm
        run: |
          npm set //registry.npmjs.org/:_authToken ${{ secrets.NODE_AUTH_TOKEN }}
          npm publish
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: npm-logs
          path: ~/.npm/_logs
      - name: Create a Release
        id: create-release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.push.outputs.tag-name }}
          generate_release_notes: true
      - name: Comment on PRs with link to release they are included in
        uses: actions/github-script@v6
        env:
          RELEASE_ID: ${{ steps.create-release.outputs.id }}
        with:
          script: |
            const releaseId = process.env.RELEASE_ID;
            console.log(`Fetching release_id: ${releaseId} ...`);
            const getReleaseResponse = await github.rest.repos.getRelease({
              release_id: process.env.RELEASE_ID,
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const release = getReleaseResponse.data;

            const prNumbersInRelease = new Set(Array.from(release.body.matchAll(/\/pull\/(\d+)/g)).map(p=>p[1]));

            for(let prNumber of prNumbersInRelease) {
              console.log(`Adding comment on PR #${prNumber} ...`);
              await github.rest.issues.createComment({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `The changes in this PR were just released in [${release.name}](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/${release.tag_name}) ðŸŽ‰.`
              })
            }
