/* tslint:disable */
/* eslint-disable */
/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.70.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TransactionFlagColor } from './TransactionFlagColor';
import {
    TransactionFlagColorFromJSON,
    TransactionFlagColorFromJSONTyped,
    TransactionFlagColorToJSON,
} from './TransactionFlagColor';
import type { ScheduledSubTransaction } from './ScheduledSubTransaction';
import {
    ScheduledSubTransactionFromJSON,
    ScheduledSubTransactionFromJSONTyped,
    ScheduledSubTransactionToJSON,
} from './ScheduledSubTransaction';

/**
 * 
 * @export
 * @interface ScheduledTransactionDetail
 */
export interface ScheduledTransactionDetail {
    /**
     * 
     * @type {string}
     * @memberof ScheduledTransactionDetail
     */
    id: string;
    /**
     * The first date for which the Scheduled Transaction was scheduled.
     * @type {string}
     * @memberof ScheduledTransactionDetail
     */
    date_first: string;
    /**
     * The next date for which the Scheduled Transaction is scheduled.
     * @type {string}
     * @memberof ScheduledTransactionDetail
     */
    date_next: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduledTransactionDetail
     */
    frequency: ScheduledTransactionDetailFrequencyEnum;
    /**
     * The scheduled transaction amount in milliunits format
     * @type {number}
     * @memberof ScheduledTransactionDetail
     */
    amount: number;
    /**
     * 
     * @type {string}
     * @memberof ScheduledTransactionDetail
     */
    memo?: string;
    /**
     * 
     * @type {TransactionFlagColor}
     * @memberof ScheduledTransactionDetail
     */
    flag_color?: TransactionFlagColor;
    /**
     * The customized name of a transaction flag
     * @type {string}
     * @memberof ScheduledTransactionDetail
     */
    flag_name?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduledTransactionDetail
     */
    account_id: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduledTransactionDetail
     */
    payee_id?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduledTransactionDetail
     */
    category_id?: string;
    /**
     * If a transfer, the account_id which the scheduled transaction transfers to
     * @type {string}
     * @memberof ScheduledTransactionDetail
     */
    transfer_account_id?: string;
    /**
     * Whether or not the scheduled transaction has been deleted.  Deleted scheduled transactions will only be included in delta requests.
     * @type {boolean}
     * @memberof ScheduledTransactionDetail
     */
    deleted: boolean;
    /**
     * 
     * @type {string}
     * @memberof ScheduledTransactionDetail
     */
    account_name: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduledTransactionDetail
     */
    payee_name?: string;
    /**
     * The name of the category.  If a split scheduled transaction, this will be 'Split'.
     * @type {string}
     * @memberof ScheduledTransactionDetail
     */
    category_name?: string;
    /**
     * If a split scheduled transaction, the subtransactions.
     * @type {Array<ScheduledSubTransaction>}
     * @memberof ScheduledTransactionDetail
     */
    subtransactions: Array<ScheduledSubTransaction>;
}


/**
 * @export
 */
export const ScheduledTransactionDetailFrequencyEnum = {
    Never: 'never',
    Daily: 'daily',
    Weekly: 'weekly',
    EveryOtherWeek: 'everyOtherWeek',
    TwiceAMonth: 'twiceAMonth',
    Every4Weeks: 'every4Weeks',
    Monthly: 'monthly',
    EveryOtherMonth: 'everyOtherMonth',
    Every3Months: 'every3Months',
    Every4Months: 'every4Months',
    TwiceAYear: 'twiceAYear',
    Yearly: 'yearly',
    EveryOtherYear: 'everyOtherYear'
} as const;
export type ScheduledTransactionDetailFrequencyEnum = typeof ScheduledTransactionDetailFrequencyEnum[keyof typeof ScheduledTransactionDetailFrequencyEnum];


/**
 * Check if a given object implements the ScheduledTransactionDetail interface.
 */
export function instanceOfScheduledTransactionDetail(value: object): value is ScheduledTransactionDetail {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('date_first' in value) || value['date_first'] === undefined) return false;
    if (!('date_next' in value) || value['date_next'] === undefined) return false;
    if (!('frequency' in value) || value['frequency'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('account_id' in value) || value['account_id'] === undefined) return false;
    if (!('deleted' in value) || value['deleted'] === undefined) return false;
    if (!('account_name' in value) || value['account_name'] === undefined) return false;
    if (!('subtransactions' in value) || value['subtransactions'] === undefined) return false;
    return true;
}

export function ScheduledTransactionDetailFromJSON(json: any): ScheduledTransactionDetail {
    return ScheduledTransactionDetailFromJSONTyped(json, false);
}

export function ScheduledTransactionDetailFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScheduledTransactionDetail {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'date_first': json['date_first'],
        'date_next': json['date_next'],
        'frequency': json['frequency'],
        'amount': json['amount'],
        'memo': json['memo'] == null ? undefined : json['memo'],
        'flag_color': json['flag_color'] == null ? undefined : TransactionFlagColorFromJSON(json['flag_color']),
        'flag_name': json['flag_name'] == null ? undefined : json['flag_name'],
        'account_id': json['account_id'],
        'payee_id': json['payee_id'] == null ? undefined : json['payee_id'],
        'category_id': json['category_id'] == null ? undefined : json['category_id'],
        'transfer_account_id': json['transfer_account_id'] == null ? undefined : json['transfer_account_id'],
        'deleted': json['deleted'],
        'account_name': json['account_name'],
        'payee_name': json['payee_name'] == null ? undefined : json['payee_name'],
        'category_name': json['category_name'] == null ? undefined : json['category_name'],
        'subtransactions': ((json['subtransactions'] as Array<any>).map(ScheduledSubTransactionFromJSON)),
    };
}

export function ScheduledTransactionDetailToJSON(value?: ScheduledTransactionDetail | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'date_first': value['date_first'],
        'date_next': value['date_next'],
        'frequency': value['frequency'],
        'amount': value['amount'],
        'memo': value['memo'],
        'flag_color': TransactionFlagColorToJSON(value['flag_color']),
        'flag_name': value['flag_name'],
        'account_id': value['account_id'],
        'payee_id': value['payee_id'],
        'category_id': value['category_id'],
        'transfer_account_id': value['transfer_account_id'],
        'deleted': value['deleted'],
        'account_name': value['account_name'],
        'payee_name': value['payee_name'],
        'category_name': value['category_name'],
        'subtransactions': ((value['subtransactions'] as Array<any>).map(ScheduledSubTransactionToJSON)),
    };
}

