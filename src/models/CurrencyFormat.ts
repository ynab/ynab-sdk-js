/* tslint:disable */
/* eslint-disable */
/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * The currency format setting for the budget.  In some cases the format will not be available and will be specified as null.
 * @export
 * @interface CurrencyFormat
 */
export interface CurrencyFormat {
    /**
     * 
     * @type {string}
     * @memberof CurrencyFormat
     */
    iso_code: string;
    /**
     * 
     * @type {string}
     * @memberof CurrencyFormat
     */
    example_format: string;
    /**
     * 
     * @type {number}
     * @memberof CurrencyFormat
     */
    decimal_digits: number;
    /**
     * 
     * @type {string}
     * @memberof CurrencyFormat
     */
    decimal_separator: string;
    /**
     * 
     * @type {boolean}
     * @memberof CurrencyFormat
     */
    symbol_first: boolean;
    /**
     * 
     * @type {string}
     * @memberof CurrencyFormat
     */
    group_separator: string;
    /**
     * 
     * @type {string}
     * @memberof CurrencyFormat
     */
    currency_symbol: string;
    /**
     * 
     * @type {boolean}
     * @memberof CurrencyFormat
     */
    display_symbol: boolean;
}

/**
 * Check if a given object implements the CurrencyFormat interface.
 */
export function instanceOfCurrencyFormat(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "iso_code" in value;
    isInstance = isInstance && "example_format" in value;
    isInstance = isInstance && "decimal_digits" in value;
    isInstance = isInstance && "decimal_separator" in value;
    isInstance = isInstance && "symbol_first" in value;
    isInstance = isInstance && "group_separator" in value;
    isInstance = isInstance && "currency_symbol" in value;
    isInstance = isInstance && "display_symbol" in value;

    return isInstance;
}

export function CurrencyFormatFromJSON(json: any): CurrencyFormat {
    return CurrencyFormatFromJSONTyped(json, false);
}

export function CurrencyFormatFromJSONTyped(json: any, ignoreDiscriminator: boolean): CurrencyFormat {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'iso_code': json['iso_code'],
        'example_format': json['example_format'],
        'decimal_digits': json['decimal_digits'],
        'decimal_separator': json['decimal_separator'],
        'symbol_first': json['symbol_first'],
        'group_separator': json['group_separator'],
        'currency_symbol': json['currency_symbol'],
        'display_symbol': json['display_symbol'],
    };
}

export function CurrencyFormatToJSON(value?: CurrencyFormat | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'iso_code': value.iso_code,
        'example_format': value.example_format,
        'decimal_digits': value.decimal_digits,
        'decimal_separator': value.decimal_separator,
        'symbol_first': value.symbol_first,
        'group_separator': value.group_separator,
        'currency_symbol': value.currency_symbol,
        'display_symbol': value.display_symbol,
    };
}

