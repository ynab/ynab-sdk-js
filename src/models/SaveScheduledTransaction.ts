/* tslint:disable */
/* eslint-disable */
/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

import { mapValues } from '../runtime';
import type { TransactionFlagColor } from './TransactionFlagColor';
import {
    TransactionFlagColorFromJSON,
    TransactionFlagColorFromJSONTyped,
    TransactionFlagColorToJSON,
    TransactionFlagColorToJSONTyped,
} from './TransactionFlagColor';
import type { ScheduledTransactionFrequency } from './ScheduledTransactionFrequency';
import {
    ScheduledTransactionFrequencyFromJSON,
    ScheduledTransactionFrequencyFromJSONTyped,
    ScheduledTransactionFrequencyToJSON,
    ScheduledTransactionFrequencyToJSONTyped,
} from './ScheduledTransactionFrequency';

/**
 * 
 * @export
 * @interface SaveScheduledTransaction
 */
export interface SaveScheduledTransaction {
    /**
     * 
     * @type {string}
     * @memberof SaveScheduledTransaction
     */
    account_id: string;
    /**
     * The scheduled transaction date in ISO format (e.g. 2016-12-01).  This should be a future date no more than 5 years into the future.
     * @type {string}
     * @memberof SaveScheduledTransaction
     */
    date: string;
    /**
     * The scheduled transaction amount in milliunits format.
     * @type {number}
     * @memberof SaveScheduledTransaction
     */
    amount?: number;
    /**
     * The payee for the scheduled transaction.  To create a transfer between two accounts, use the account transfer payee pointing to the target account.  Account transfer payees are specified as `transfer_payee_id` on the account resource.
     * @type {string}
     * @memberof SaveScheduledTransaction
     */
    payee_id?: string | null;
    /**
     * The payee name for the the scheduled transaction.  If a `payee_name` value is provided and `payee_id` has a null value, the `payee_name` value will be used to resolve the payee by either (1) a payee with the same name or (2) creation of a new payee.
     * @type {string}
     * @memberof SaveScheduledTransaction
     */
    payee_name?: string | null;
    /**
     * The category for the scheduled transaction. Credit Card Payment categories are not permitted. Creating a split scheduled transaction is not currently supported.
     * @type {string}
     * @memberof SaveScheduledTransaction
     */
    category_id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SaveScheduledTransaction
     */
    memo?: string | null;
    /**
     * 
     * @type {TransactionFlagColor}
     * @memberof SaveScheduledTransaction
     */
    flag_color?: TransactionFlagColor | null;
    /**
     * 
     * @type {ScheduledTransactionFrequency}
     * @memberof SaveScheduledTransaction
     */
    frequency?: ScheduledTransactionFrequency;
}



/**
 * Check if a given object implements the SaveScheduledTransaction interface.
 */
export function instanceOfSaveScheduledTransaction(value: object): value is SaveScheduledTransaction {
    if (!('account_id' in value) || value['account_id'] === undefined) return false;
    if (!('date' in value) || value['date'] === undefined) return false;
    return true;
}

export function SaveScheduledTransactionFromJSON(json: any): SaveScheduledTransaction {
    return SaveScheduledTransactionFromJSONTyped(json, false);
}

export function SaveScheduledTransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): SaveScheduledTransaction {
    if (json == null) {
        return json;
    }
    return {
        
        'account_id': json['account_id'],
        'date': json['date'],
        'amount': json['amount'] == null ? undefined : json['amount'],
        'payee_id': json['payee_id'] == null ? undefined : json['payee_id'],
        'payee_name': json['payee_name'] == null ? undefined : json['payee_name'],
        'category_id': json['category_id'] == null ? undefined : json['category_id'],
        'memo': json['memo'] == null ? undefined : json['memo'],
        'flag_color': json['flag_color'] == null ? undefined : TransactionFlagColorFromJSON(json['flag_color']),
        'frequency': json['frequency'] == null ? undefined : ScheduledTransactionFrequencyFromJSON(json['frequency']),
    };
}

export function SaveScheduledTransactionToJSON(json: any): SaveScheduledTransaction {
    return SaveScheduledTransactionToJSONTyped(json, false);
}

export function SaveScheduledTransactionToJSONTyped(value?: SaveScheduledTransaction | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'account_id': value['account_id'],
        'date': value['date'],
        'amount': value['amount'],
        'payee_id': value['payee_id'],
        'payee_name': value['payee_name'],
        'category_id': value['category_id'],
        'memo': value['memo'],
        'flag_color': TransactionFlagColorToJSON(value['flag_color']),
        'frequency': ScheduledTransactionFrequencyToJSON(value['frequency']),
    };
}

