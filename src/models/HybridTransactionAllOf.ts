/* tslint:disable */
/* eslint-disable */
/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface HybridTransactionAllOf
 */
export interface HybridTransactionAllOf {
    /**
     * Whether the hybrid transaction represents a regular transaction or a subtransaction
     * @type {string}
     * @memberof HybridTransactionAllOf
     */
    type: HybridTransactionAllOfTypeEnum;
    /**
     * For subtransaction types, this is the id of the parent transaction.  For transaction types, this id will be always be null.
     * @type {string}
     * @memberof HybridTransactionAllOf
     */
    parent_transaction_id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HybridTransactionAllOf
     */
    account_name: string;
    /**
     * 
     * @type {string}
     * @memberof HybridTransactionAllOf
     */
    payee_name?: string | null;
    /**
     * The name of the category.  If a split transaction, this will be 'Split'.
     * @type {string}
     * @memberof HybridTransactionAllOf
     */
    category_name?: string;
}


/**
 * @export
 */
export const HybridTransactionAllOfTypeEnum = {
    Transaction: 'transaction',
    Subtransaction: 'subtransaction'
} as const;
export type HybridTransactionAllOfTypeEnum = typeof HybridTransactionAllOfTypeEnum[keyof typeof HybridTransactionAllOfTypeEnum];


/**
 * Check if a given object implements the HybridTransactionAllOf interface.
 */
export function instanceOfHybridTransactionAllOf(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "account_name" in value;

    return isInstance;
}

export function HybridTransactionAllOfFromJSON(json: any): HybridTransactionAllOf {
    return HybridTransactionAllOfFromJSONTyped(json, false);
}

export function HybridTransactionAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): HybridTransactionAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'parent_transaction_id': !exists(json, 'parent_transaction_id') ? undefined : json['parent_transaction_id'],
        'account_name': json['account_name'],
        'payee_name': !exists(json, 'payee_name') ? undefined : json['payee_name'],
        'category_name': !exists(json, 'category_name') ? undefined : json['category_name'],
    };
}

export function HybridTransactionAllOfToJSON(value?: HybridTransactionAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'parent_transaction_id': value.parent_transaction_id,
        'account_name': value.account_name,
        'payee_name': value.payee_name,
        'category_name': value.category_name,
    };
}

