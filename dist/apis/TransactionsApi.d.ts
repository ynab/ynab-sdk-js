/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { HybridTransactionsResponse, PatchTransactionsWrapper, PostTransactionsWrapper, PutTransactionWrapper, SaveTransactionsResponse, TransactionResponse, TransactionsImportResponse, TransactionsResponse } from '../models/index';
export interface CreateTransactionRequest {
    budgetId: string;
    data: PostTransactionsWrapper;
}
export interface DeleteTransactionRequest {
    budgetId: string;
    transactionId: string;
}
export interface GetTransactionByIdRequest {
    budgetId: string;
    transactionId: string;
}
export interface GetTransactionsRequest {
    budgetId: string;
    sinceDate?: string;
    type?: GetTransactionsTypeEnum;
    lastKnowledgeOfServer?: number;
}
export interface GetTransactionsByAccountRequest {
    budgetId: string;
    accountId: string;
    sinceDate?: string;
    type?: GetTransactionsByAccountTypeEnum;
    lastKnowledgeOfServer?: number;
}
export interface GetTransactionsByCategoryRequest {
    budgetId: string;
    categoryId: string;
    sinceDate?: string;
    type?: GetTransactionsByCategoryTypeEnum;
    lastKnowledgeOfServer?: number;
}
export interface GetTransactionsByPayeeRequest {
    budgetId: string;
    payeeId: string;
    sinceDate?: string;
    type?: GetTransactionsByPayeeTypeEnum;
    lastKnowledgeOfServer?: number;
}
export interface ImportTransactionsRequest {
    budgetId: string;
}
export interface UpdateTransactionRequest {
    budgetId: string;
    transactionId: string;
    data: PutTransactionWrapper;
}
export interface UpdateTransactionsRequest {
    budgetId: string;
    data: PatchTransactionsWrapper;
}
/**
 *
 */
export declare class TransactionsApi extends runtime.BaseAPI {
    /**
     * Creates a single transaction or multiple transactions.  If you provide a body containing a `transaction` object, a single transaction will be created and if you provide a body containing a `transactions` array, multiple transactions will be created.  Scheduled transactions cannot be created on this endpoint.
     * Create a single transaction or multiple transactions
     */
    createTransactionRaw(requestParameters: CreateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SaveTransactionsResponse>>;
    /**
     * Creates a single transaction or multiple transactions.  If you provide a body containing a `transaction` object, a single transaction will be created and if you provide a body containing a `transactions` array, multiple transactions will be created.  Scheduled transactions cannot be created on this endpoint.
     * Create a single transaction or multiple transactions
     */
    createTransaction(budgetId: string, data: PostTransactionsWrapper, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SaveTransactionsResponse>;
    /**
     * Deletes a transaction
     * Deletes an existing transaction
     */
    deleteTransactionRaw(requestParameters: DeleteTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionResponse>>;
    /**
     * Deletes a transaction
     * Deletes an existing transaction
     */
    deleteTransaction(budgetId: string, transactionId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionResponse>;
    /**
     * Returns a single transaction
     * Single transaction
     */
    getTransactionByIdRaw(requestParameters: GetTransactionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionResponse>>;
    /**
     * Returns a single transaction
     * Single transaction
     */
    getTransactionById(budgetId: string, transactionId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionResponse>;
    /**
     * Returns budget transactions
     * List transactions
     */
    getTransactionsRaw(requestParameters: GetTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionsResponse>>;
    /**
     * Returns budget transactions
     * List transactions
     */
    getTransactions(budgetId: string, sinceDate?: string, type?: GetTransactionsTypeEnum, lastKnowledgeOfServer?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionsResponse>;
    /**
     * Returns all transactions for a specified account
     * List account transactions
     */
    getTransactionsByAccountRaw(requestParameters: GetTransactionsByAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionsResponse>>;
    /**
     * Returns all transactions for a specified account
     * List account transactions
     */
    getTransactionsByAccount(budgetId: string, accountId: string, sinceDate?: string, type?: GetTransactionsByAccountTypeEnum, lastKnowledgeOfServer?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionsResponse>;
    /**
     * Returns all transactions for a specified category
     * List category transactions
     */
    getTransactionsByCategoryRaw(requestParameters: GetTransactionsByCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HybridTransactionsResponse>>;
    /**
     * Returns all transactions for a specified category
     * List category transactions
     */
    getTransactionsByCategory(budgetId: string, categoryId: string, sinceDate?: string, type?: GetTransactionsByCategoryTypeEnum, lastKnowledgeOfServer?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HybridTransactionsResponse>;
    /**
     * Returns all transactions for a specified payee
     * List payee transactions
     */
    getTransactionsByPayeeRaw(requestParameters: GetTransactionsByPayeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HybridTransactionsResponse>>;
    /**
     * Returns all transactions for a specified payee
     * List payee transactions
     */
    getTransactionsByPayee(budgetId: string, payeeId: string, sinceDate?: string, type?: GetTransactionsByPayeeTypeEnum, lastKnowledgeOfServer?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HybridTransactionsResponse>;
    /**
     * Imports available transactions on all linked accounts for the given budget.  Linked accounts allow transactions to be imported directly from a specified financial institution and this endpoint initiates that import.  Sending a request to this endpoint is the equivalent of clicking \"Import\" on each account in the web application or tapping the \"New Transactions\" banner in the mobile applications.  The response for this endpoint contains the transaction ids that have been imported.
     * Import transactions
     */
    importTransactionsRaw(requestParameters: ImportTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionsImportResponse>>;
    /**
     * Imports available transactions on all linked accounts for the given budget.  Linked accounts allow transactions to be imported directly from a specified financial institution and this endpoint initiates that import.  Sending a request to this endpoint is the equivalent of clicking \"Import\" on each account in the web application or tapping the \"New Transactions\" banner in the mobile applications.  The response for this endpoint contains the transaction ids that have been imported.
     * Import transactions
     */
    importTransactions(budgetId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionsImportResponse>;
    /**
     * Updates a single transaction
     * Updates an existing transaction
     */
    updateTransactionRaw(requestParameters: UpdateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionResponse>>;
    /**
     * Updates a single transaction
     * Updates an existing transaction
     */
    updateTransaction(budgetId: string, transactionId: string, data: PutTransactionWrapper, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionResponse>;
    /**
     * Updates multiple transactions, by `id` or `import_id`.
     * Update multiple transactions
     */
    updateTransactionsRaw(requestParameters: UpdateTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SaveTransactionsResponse>>;
    /**
     * Updates multiple transactions, by `id` or `import_id`.
     * Update multiple transactions
     */
    updateTransactions(budgetId: string, data: PatchTransactionsWrapper, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SaveTransactionsResponse>;
}
/**
 * @export
 */
export declare const GetTransactionsTypeEnum: {
    readonly Uncategorized: "uncategorized";
    readonly Unapproved: "unapproved";
};
export declare type GetTransactionsTypeEnum = typeof GetTransactionsTypeEnum[keyof typeof GetTransactionsTypeEnum];
/**
 * @export
 */
export declare const GetTransactionsByAccountTypeEnum: {
    readonly Uncategorized: "uncategorized";
    readonly Unapproved: "unapproved";
};
export declare type GetTransactionsByAccountTypeEnum = typeof GetTransactionsByAccountTypeEnum[keyof typeof GetTransactionsByAccountTypeEnum];
/**
 * @export
 */
export declare const GetTransactionsByCategoryTypeEnum: {
    readonly Uncategorized: "uncategorized";
    readonly Unapproved: "unapproved";
};
export declare type GetTransactionsByCategoryTypeEnum = typeof GetTransactionsByCategoryTypeEnum[keyof typeof GetTransactionsByCategoryTypeEnum];
/**
 * @export
 */
export declare const GetTransactionsByPayeeTypeEnum: {
    readonly Uncategorized: "uncategorized";
    readonly Unapproved: "unapproved";
};
export declare type GetTransactionsByPayeeTypeEnum = typeof GetTransactionsByPayeeTypeEnum[keyof typeof GetTransactionsByPayeeTypeEnum];
