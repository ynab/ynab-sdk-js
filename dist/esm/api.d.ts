/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Configuration } from "./configuration";
/**
 *
 * @export
 */
export declare const COLLECTION_FORMATS: {
    csv: string;
    ssv: string;
    tsv: string;
    pipes: string;
};
/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}
/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}
/**
 *
 * @export
 * @class BaseAPI
 */
export declare class BaseAPI {
    protected configuration: Configuration;
    constructor(configuration: Configuration);
}
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export declare class RequiredError extends Error {
    field: string;
    name: "RequiredError";
    constructor(field: string, msg?: string);
}
/**
 *
 * @export
 * @interface Account
 */
export interface Account {
    /**
     *
     * @type {string}
     * @memberof Account
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof Account
     */
    name: string;
    /**
     *
     * @type {AccountType}
     * @memberof Account
     */
    type: AccountType;
    /**
     * Whether this account is on budget or not
     * @type {boolean}
     * @memberof Account
     */
    on_budget: boolean;
    /**
     * Whether this account is closed or not
     * @type {boolean}
     * @memberof Account
     */
    closed: boolean;
    /**
     *
     * @type {string}
     * @memberof Account
     */
    note?: string | null;
    /**
     * The current balance of the account in milliunits format
     * @type {number}
     * @memberof Account
     */
    balance: number;
    /**
     * The current cleared balance of the account in milliunits format
     * @type {number}
     * @memberof Account
     */
    cleared_balance: number;
    /**
     * The current uncleared balance of the account in milliunits format
     * @type {number}
     * @memberof Account
     */
    uncleared_balance: number;
    /**
     * The payee id which should be used when transferring to this account
     * @type {string}
     * @memberof Account
     */
    transfer_payee_id: string;
    /**
     * Whether or not the account is linked to a financial institution for automatic transaction import.
     * @type {boolean}
     * @memberof Account
     */
    direct_import_linked?: boolean | null;
    /**
     * If an account linked to a financial institution (direct_import_linked=true) and the linked connection is not in a healthy state, this will be true.
     * @type {boolean}
     * @memberof Account
     */
    direct_import_in_error?: boolean | null;
    /**
     * A date/time specifying when the account was last reconciled.
     * @type {string}
     * @memberof Account
     */
    last_reconciled_at?: string | null;
    /**
     * The original debt/loan account balance, specified in milliunits format.
     * @type {number}
     * @memberof Account
     */
    debt_original_balance?: number | null;
    /**
     * The debt/loan account interest rate(s), by effective date.
     * @type {LoanAccountPeriodicValue}
     * @memberof Account
     */
    debt_interest_rates?: LoanAccountPeriodicValue | null;
    /**
     * The minimum payment amount(s) for the debt/loan account, by effective date.  The amounts are specified in milliunits format.
     * @type {LoanAccountPeriodicValue}
     * @memberof Account
     */
    debt_minimum_payments?: LoanAccountPeriodicValue | null;
    /**
     * The escrow value(s) for the debt/loan account, by effective date.  The amounts are specified in milliunits format.
     * @type {LoanAccountPeriodicValue}
     * @memberof Account
     */
    debt_escrow_amounts?: LoanAccountPeriodicValue | null;
    /**
     * Whether or not the account has been deleted.  Deleted accounts will only be included in delta requests.
     * @type {boolean}
     * @memberof Account
     */
    deleted: boolean;
}
/**
 *
 * @export
 * @interface AccountResponse
 */
export interface AccountResponse {
    /**
     *
     * @type {AccountResponseData}
     * @memberof AccountResponse
     */
    data: AccountResponseData;
}
/**
 *
 * @export
 * @interface AccountResponseData
 */
export interface AccountResponseData {
    /**
     *
     * @type {Account}
     * @memberof AccountResponseData
     */
    account: Account;
}
/**
 * The type of account
 * @export
 * @enum {string}
 */
export declare enum AccountType {
    Checking,
    Savings,
    Cash,
    CreditCard,
    LineOfCredit,
    OtherAsset,
    OtherLiability,
    Mortgage,
    AutoLoan,
    StudentLoan,
    PersonalLoan,
    MedicalDebt,
    OtherDebt
}
/**
 *
 * @export
 * @interface AccountsResponse
 */
export interface AccountsResponse {
    /**
     *
     * @type {AccountsResponseData}
     * @memberof AccountsResponse
     */
    data: AccountsResponseData;
}
/**
 *
 * @export
 * @interface AccountsResponseData
 */
export interface AccountsResponseData {
    /**
     *
     * @type {Array<Account>}
     * @memberof AccountsResponseData
     */
    accounts: Array<Account>;
    /**
     * The knowledge of the server
     * @type {number}
     * @memberof AccountsResponseData
     */
    server_knowledge: number;
}
/**
 *
 * @export
 * @interface BudgetDetailResponse
 */
export interface BudgetDetailResponse {
    /**
     *
     * @type {BudgetDetailResponseData}
     * @memberof BudgetDetailResponse
     */
    data: BudgetDetailResponseData;
}
/**
 *
 * @export
 * @interface BudgetDetailResponseData
 */
export interface BudgetDetailResponseData {
    /**
     *
     * @type {BudgetDetail}
     * @memberof BudgetDetailResponseData
     */
    budget: BudgetDetail;
    /**
     * The knowledge of the server
     * @type {number}
     * @memberof BudgetDetailResponseData
     */
    server_knowledge: number;
}
/**
 *
 * @export
 * @interface BudgetSettings
 */
export interface BudgetSettings {
    /**
     *
     * @type {DateFormat}
     * @memberof BudgetSettings
     */
    date_format: DateFormat;
    /**
     *
     * @type {CurrencyFormat}
     * @memberof BudgetSettings
     */
    currency_format: CurrencyFormat;
}
/**
 *
 * @export
 * @interface BudgetSettingsResponse
 */
export interface BudgetSettingsResponse {
    /**
     *
     * @type {BudgetSettingsResponseData}
     * @memberof BudgetSettingsResponse
     */
    data: BudgetSettingsResponseData;
}
/**
 *
 * @export
 * @interface BudgetSettingsResponseData
 */
export interface BudgetSettingsResponseData {
    /**
     *
     * @type {BudgetSettings}
     * @memberof BudgetSettingsResponseData
     */
    settings: BudgetSettings;
}
/**
 *
 * @export
 * @interface BudgetSummary
 */
export interface BudgetSummary {
    /**
     *
     * @type {string}
     * @memberof BudgetSummary
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof BudgetSummary
     */
    name: string;
    /**
     * The last time any changes were made to the budget from either a web or mobile client
     * @type {string}
     * @memberof BudgetSummary
     */
    last_modified_on?: string | null;
    /**
     * The earliest budget month
     * @type {string}
     * @memberof BudgetSummary
     */
    first_month?: string | null;
    /**
     * The latest budget month
     * @type {string}
     * @memberof BudgetSummary
     */
    last_month?: string | null;
    /**
     *
     * @type {DateFormat}
     * @memberof BudgetSummary
     */
    date_format?: DateFormat | null;
    /**
     *
     * @type {CurrencyFormat}
     * @memberof BudgetSummary
     */
    currency_format?: CurrencyFormat | null;
    /**
     * The budget accounts (only included if `include_accounts=true` specified as query parameter)
     * @type {Array<Account>}
     * @memberof BudgetSummary
     */
    accounts?: Array<Account> | null;
}
/**
 *
 * @export
 * @interface BudgetSummaryResponse
 */
export interface BudgetSummaryResponse {
    /**
     *
     * @type {BudgetSummaryResponseData}
     * @memberof BudgetSummaryResponse
     */
    data: BudgetSummaryResponseData;
}
/**
 *
 * @export
 * @interface BudgetSummaryResponseData
 */
export interface BudgetSummaryResponseData {
    /**
     *
     * @type {Array<BudgetSummary>}
     * @memberof BudgetSummaryResponseData
     */
    budgets: Array<BudgetSummary>;
    /**
     * The default budget, if the associated application is configured to support specifying it
     * @type {BudgetSummary}
     * @memberof BudgetSummaryResponseData
     */
    default_budget?: BudgetSummary | null;
}
/**
 *
 * @export
 * @interface BulkResponse
 */
export interface BulkResponse {
    /**
     *
     * @type {BulkResponseData}
     * @memberof BulkResponse
     */
    data: BulkResponseData;
}
/**
 *
 * @export
 * @interface BulkResponseData
 */
export interface BulkResponseData {
    /**
     *
     * @type {BulkResponseDataBulk}
     * @memberof BulkResponseData
     */
    bulk: BulkResponseDataBulk;
}
/**
 *
 * @export
 * @interface BulkResponseDataBulk
 */
export interface BulkResponseDataBulk {
    /**
     * The list of Transaction ids that were created.
     * @type {Array<string>}
     * @memberof BulkResponseDataBulk
     */
    transaction_ids: Array<string>;
    /**
     * If any Transactions were not created because they had an `import_id` matching a transaction already on the same account, the specified import_id(s) will be included in this list.
     * @type {Array<string>}
     * @memberof BulkResponseDataBulk
     */
    duplicate_import_ids: Array<string>;
}
/**
 *
 * @export
 * @interface BulkTransactions
 */
export interface BulkTransactions {
    /**
     *
     * @type {Array<SaveTransaction>}
     * @memberof BulkTransactions
     */
    transactions: Array<SaveTransaction>;
}
/**
 *
 * @export
 * @interface CategoriesResponse
 */
export interface CategoriesResponse {
    /**
     *
     * @type {CategoriesResponseData}
     * @memberof CategoriesResponse
     */
    data: CategoriesResponseData;
}
/**
 *
 * @export
 * @interface CategoriesResponseData
 */
export interface CategoriesResponseData {
    /**
     *
     * @type {Array<CategoryGroupWithCategories>}
     * @memberof CategoriesResponseData
     */
    category_groups: Array<CategoryGroupWithCategories>;
    /**
     * The knowledge of the server
     * @type {number}
     * @memberof CategoriesResponseData
     */
    server_knowledge: number;
}
/**
 *
 * @export
 * @interface Category
 */
export interface Category {
    /**
     *
     * @type {string}
     * @memberof Category
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof Category
     */
    category_group_id: string;
    /**
     *
     * @type {string}
     * @memberof Category
     */
    name: string;
    /**
     * Whether or not the category is hidden
     * @type {boolean}
     * @memberof Category
     */
    hidden: boolean;
    /**
     * If category is hidden this is the id of the category group it originally belonged to before it was hidden.
     * @type {string}
     * @memberof Category
     */
    original_category_group_id?: string | null;
    /**
     *
     * @type {string}
     * @memberof Category
     */
    note?: string | null;
    /**
     * Budgeted amount in milliunits format
     * @type {number}
     * @memberof Category
     */
    budgeted: number;
    /**
     * Activity amount in milliunits format
     * @type {number}
     * @memberof Category
     */
    activity: number;
    /**
     * Balance in milliunits format
     * @type {number}
     * @memberof Category
     */
    balance: number;
    /**
     * The type of goal, if the category has a goal (TB='Target Category Balance', TBD='Target Category Balance by Date', MF='Monthly Funding', NEED='Plan Your Spending')
     * @type {string}
     * @memberof Category
     */
    goal_type?: Category.GoalTypeEnum | null;
    /**
     * The day of the goal
     * @type {number}
     * @memberof Category
     */
    goal_day?: number | null;
    /**
     * The goal cadence
     * @type {number}
     * @memberof Category
     */
    goal_cadence?: number | null;
    /**
     * The goal cadence frequency
     * @type {number}
     * @memberof Category
     */
    goal_cadence_frequency?: number | null;
    /**
     * The month a goal was created
     * @type {string}
     * @memberof Category
     */
    goal_creation_month?: string | null;
    /**
     * The goal target amount in milliunits
     * @type {number}
     * @memberof Category
     */
    goal_target?: number | null;
    /**
     * The original target month for the goal to be completed.  Only some goal types specify this date.
     * @type {string}
     * @memberof Category
     */
    goal_target_month?: string | null;
    /**
     * The percentage completion of the goal
     * @type {number}
     * @memberof Category
     */
    goal_percentage_complete?: number | null;
    /**
     * The number of months, including the current month, left in the current goal period.
     * @type {number}
     * @memberof Category
     */
    goal_months_to_budget?: number | null;
    /**
     * The amount of funding still needed in the current month to stay on track towards completing the goal within the current goal period.  This amount will generally correspond to the 'Underfunded' amount in the web and mobile clients except when viewing a category with a Needed for Spending Goal in a future month.  The web and mobile clients will ignore any funding from a prior goal period when viewing category with a Needed for Spending Goal in a future month.
     * @type {number}
     * @memberof Category
     */
    goal_under_funded?: number | null;
    /**
     * The total amount funded towards the goal within the current goal period.
     * @type {number}
     * @memberof Category
     */
    goal_overall_funded?: number | null;
    /**
     * The amount of funding still needed to complete the goal within the current goal period.
     * @type {number}
     * @memberof Category
     */
    goal_overall_left?: number | null;
    /**
     * Whether or not the category has been deleted.  Deleted categories will only be included in delta requests.
     * @type {boolean}
     * @memberof Category
     */
    deleted: boolean;
}
/**
 * @export
 * @namespace Category
 */
export declare namespace Category {
    /**
     * @export
     * @enum {string}
     */
    enum GoalTypeEnum {
        TB,
        TBD,
        MF,
        NEED,
        DEBT
    }
}
/**
 *
 * @export
 * @interface CategoryGroup
 */
export interface CategoryGroup {
    /**
     *
     * @type {string}
     * @memberof CategoryGroup
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof CategoryGroup
     */
    name: string;
    /**
     * Whether or not the category group is hidden
     * @type {boolean}
     * @memberof CategoryGroup
     */
    hidden: boolean;
    /**
     * Whether or not the category group has been deleted.  Deleted category groups will only be included in delta requests.
     * @type {boolean}
     * @memberof CategoryGroup
     */
    deleted: boolean;
}
/**
 *
 * @export
 * @interface CategoryResponse
 */
export interface CategoryResponse {
    /**
     *
     * @type {CategoryResponseData}
     * @memberof CategoryResponse
     */
    data: CategoryResponseData;
}
/**
 *
 * @export
 * @interface CategoryResponseData
 */
export interface CategoryResponseData {
    /**
     *
     * @type {Category}
     * @memberof CategoryResponseData
     */
    category: Category;
}
/**
 * The currency format setting for the budget.  In some cases the format will not be available and will be specified as null.
 * @export
 * @interface CurrencyFormat
 */
export interface CurrencyFormat {
    /**
     *
     * @type {string}
     * @memberof CurrencyFormat
     */
    iso_code: string;
    /**
     *
     * @type {string}
     * @memberof CurrencyFormat
     */
    example_format: string;
    /**
     *
     * @type {number}
     * @memberof CurrencyFormat
     */
    decimal_digits: number;
    /**
     *
     * @type {string}
     * @memberof CurrencyFormat
     */
    decimal_separator: string;
    /**
     *
     * @type {boolean}
     * @memberof CurrencyFormat
     */
    symbol_first: boolean;
    /**
     *
     * @type {string}
     * @memberof CurrencyFormat
     */
    group_separator: string;
    /**
     *
     * @type {string}
     * @memberof CurrencyFormat
     */
    currency_symbol: string;
    /**
     *
     * @type {boolean}
     * @memberof CurrencyFormat
     */
    display_symbol: boolean;
}
/**
 * The date format setting for the budget.  In some cases the format will not be available and will be specified as null.
 * @export
 * @interface DateFormat
 */
export interface DateFormat {
    /**
     *
     * @type {string}
     * @memberof DateFormat
     */
    format: string;
}
/**
 *
 * @export
 * @interface ErrorDetail
 */
export interface ErrorDetail {
    /**
     *
     * @type {string}
     * @memberof ErrorDetail
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof ErrorDetail
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof ErrorDetail
     */
    detail: string;
}
/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     *
     * @type {ErrorDetail}
     * @memberof ErrorResponse
     */
    error: ErrorDetail;
}
/**
 *
 * @export
 * @interface HybridTransactionsResponse
 */
export interface HybridTransactionsResponse {
    /**
     *
     * @type {HybridTransactionsResponseData}
     * @memberof HybridTransactionsResponse
     */
    data: HybridTransactionsResponseData;
}
/**
 *
 * @export
 * @interface HybridTransactionsResponseData
 */
export interface HybridTransactionsResponseData {
    /**
     *
     * @type {Array<HybridTransaction>}
     * @memberof HybridTransactionsResponseData
     */
    transactions: Array<HybridTransaction>;
    /**
     * The knowledge of the server
     * @type {number}
     * @memberof HybridTransactionsResponseData
     */
    server_knowledge?: number | null;
}
/**
 *
 * @export
 * @interface LoanAccountPeriodicValue
 */
export interface LoanAccountPeriodicValue {
    [key: string]: number;
}
/**
 *
 * @export
 * @interface MonthDetailResponse
 */
export interface MonthDetailResponse {
    /**
     *
     * @type {MonthDetailResponseData}
     * @memberof MonthDetailResponse
     */
    data: MonthDetailResponseData;
}
/**
 *
 * @export
 * @interface MonthDetailResponseData
 */
export interface MonthDetailResponseData {
    /**
     *
     * @type {MonthDetail}
     * @memberof MonthDetailResponseData
     */
    month: MonthDetail;
}
/**
 *
 * @export
 * @interface MonthSummariesResponse
 */
export interface MonthSummariesResponse {
    /**
     *
     * @type {MonthSummariesResponseData}
     * @memberof MonthSummariesResponse
     */
    data: MonthSummariesResponseData;
}
/**
 *
 * @export
 * @interface MonthSummariesResponseData
 */
export interface MonthSummariesResponseData {
    /**
     *
     * @type {Array<MonthSummary>}
     * @memberof MonthSummariesResponseData
     */
    months: Array<MonthSummary>;
    /**
     * The knowledge of the server
     * @type {number}
     * @memberof MonthSummariesResponseData
     */
    server_knowledge: number;
}
/**
 *
 * @export
 * @interface MonthSummary
 */
export interface MonthSummary {
    /**
     *
     * @type {string}
     * @memberof MonthSummary
     */
    month: string;
    /**
     *
     * @type {string}
     * @memberof MonthSummary
     */
    note?: string | null;
    /**
     * The total amount of transactions categorized to 'Inflow: Ready to Assign' in the month
     * @type {number}
     * @memberof MonthSummary
     */
    income: number;
    /**
     * The total amount budgeted in the month
     * @type {number}
     * @memberof MonthSummary
     */
    budgeted: number;
    /**
     * The total amount of transactions in the month, excluding those categorized to 'Inflow: Ready to Assign'
     * @type {number}
     * @memberof MonthSummary
     */
    activity: number;
    /**
     * The available amount for 'Ready to Assign'
     * @type {number}
     * @memberof MonthSummary
     */
    to_be_budgeted: number;
    /**
     * The Age of Money as of the month
     * @type {number}
     * @memberof MonthSummary
     */
    age_of_money?: number | null;
    /**
     * Whether or not the month has been deleted.  Deleted months will only be included in delta requests.
     * @type {boolean}
     * @memberof MonthSummary
     */
    deleted: boolean;
}
/**
 *
 * @export
 * @interface PatchMonthCategoryWrapper
 */
export interface PatchMonthCategoryWrapper {
    /**
     *
     * @type {SaveMonthCategory}
     * @memberof PatchMonthCategoryWrapper
     */
    category: SaveMonthCategory;
}
/**
 *
 * @export
 * @interface PatchTransactionsWrapper
 */
export interface PatchTransactionsWrapper {
    /**
     *
     * @type {Array<SaveTransactionWithId>}
     * @memberof PatchTransactionsWrapper
     */
    transactions: Array<SaveTransactionWithId>;
}
/**
 *
 * @export
 * @interface Payee
 */
export interface Payee {
    /**
     *
     * @type {string}
     * @memberof Payee
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof Payee
     */
    name: string;
    /**
     * If a transfer payee, the `account_id` to which this payee transfers to
     * @type {string}
     * @memberof Payee
     */
    transfer_account_id?: string | null;
    /**
     * Whether or not the payee has been deleted.  Deleted payees will only be included in delta requests.
     * @type {boolean}
     * @memberof Payee
     */
    deleted: boolean;
}
/**
 *
 * @export
 * @interface PayeeLocation
 */
export interface PayeeLocation {
    /**
     *
     * @type {string}
     * @memberof PayeeLocation
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof PayeeLocation
     */
    payee_id: string;
    /**
     *
     * @type {string}
     * @memberof PayeeLocation
     */
    latitude: string;
    /**
     *
     * @type {string}
     * @memberof PayeeLocation
     */
    longitude: string;
    /**
     * Whether or not the payee location has been deleted.  Deleted payee locations will only be included in delta requests.
     * @type {boolean}
     * @memberof PayeeLocation
     */
    deleted: boolean;
}
/**
 *
 * @export
 * @interface PayeeLocationResponse
 */
export interface PayeeLocationResponse {
    /**
     *
     * @type {PayeeLocationResponseData}
     * @memberof PayeeLocationResponse
     */
    data: PayeeLocationResponseData;
}
/**
 *
 * @export
 * @interface PayeeLocationResponseData
 */
export interface PayeeLocationResponseData {
    /**
     *
     * @type {PayeeLocation}
     * @memberof PayeeLocationResponseData
     */
    payee_location: PayeeLocation;
}
/**
 *
 * @export
 * @interface PayeeLocationsResponse
 */
export interface PayeeLocationsResponse {
    /**
     *
     * @type {PayeeLocationsResponseData}
     * @memberof PayeeLocationsResponse
     */
    data: PayeeLocationsResponseData;
}
/**
 *
 * @export
 * @interface PayeeLocationsResponseData
 */
export interface PayeeLocationsResponseData {
    /**
     *
     * @type {Array<PayeeLocation>}
     * @memberof PayeeLocationsResponseData
     */
    payee_locations: Array<PayeeLocation>;
}
/**
 *
 * @export
 * @interface PayeeResponse
 */
export interface PayeeResponse {
    /**
     *
     * @type {PayeeResponseData}
     * @memberof PayeeResponse
     */
    data: PayeeResponseData;
}
/**
 *
 * @export
 * @interface PayeeResponseData
 */
export interface PayeeResponseData {
    /**
     *
     * @type {Payee}
     * @memberof PayeeResponseData
     */
    payee: Payee;
}
/**
 *
 * @export
 * @interface PayeesResponse
 */
export interface PayeesResponse {
    /**
     *
     * @type {PayeesResponseData}
     * @memberof PayeesResponse
     */
    data: PayeesResponseData;
}
/**
 *
 * @export
 * @interface PayeesResponseData
 */
export interface PayeesResponseData {
    /**
     *
     * @type {Array<Payee>}
     * @memberof PayeesResponseData
     */
    payees: Array<Payee>;
    /**
     * The knowledge of the server
     * @type {number}
     * @memberof PayeesResponseData
     */
    server_knowledge: number;
}
/**
 *
 * @export
 * @interface PostAccountWrapper
 */
export interface PostAccountWrapper {
    /**
     *
     * @type {SaveAccount}
     * @memberof PostAccountWrapper
     */
    account: SaveAccount;
}
/**
 *
 * @export
 * @interface PostTransactionsWrapper
 */
export interface PostTransactionsWrapper {
    /**
     *
     * @type {SaveTransaction}
     * @memberof PostTransactionsWrapper
     */
    transaction?: SaveTransaction | null;
    /**
     *
     * @type {Array<SaveTransaction>}
     * @memberof PostTransactionsWrapper
     */
    transactions?: Array<SaveTransaction> | null;
}
/**
 *
 * @export
 * @interface PutTransactionWrapper
 */
export interface PutTransactionWrapper {
    /**
     *
     * @type {SaveTransaction}
     * @memberof PutTransactionWrapper
     */
    transaction: SaveTransaction;
}
/**
 *
 * @export
 * @interface SaveAccount
 */
export interface SaveAccount {
    /**
     * The name of the account
     * @type {string}
     * @memberof SaveAccount
     */
    name: string;
    /**
     *
     * @type {AccountType}
     * @memberof SaveAccount
     */
    type: AccountType;
    /**
     * The current balance of the account in milliunits format
     * @type {number}
     * @memberof SaveAccount
     */
    balance: number;
}
/**
 *
 * @export
 * @interface SaveCategoryResponse
 */
export interface SaveCategoryResponse {
    /**
     *
     * @type {SaveCategoryResponseData}
     * @memberof SaveCategoryResponse
     */
    data: SaveCategoryResponseData;
}
/**
 *
 * @export
 * @interface SaveCategoryResponseData
 */
export interface SaveCategoryResponseData {
    /**
     *
     * @type {Category}
     * @memberof SaveCategoryResponseData
     */
    category: Category;
    /**
     * The knowledge of the server
     * @type {number}
     * @memberof SaveCategoryResponseData
     */
    server_knowledge: number;
}
/**
 *
 * @export
 * @interface SaveMonthCategory
 */
export interface SaveMonthCategory {
    /**
     * Budgeted amount in milliunits format
     * @type {number}
     * @memberof SaveMonthCategory
     */
    budgeted: number;
}
/**
 *
 * @export
 * @interface SaveSubTransaction
 */
export interface SaveSubTransaction {
    /**
     * The subtransaction amount in milliunits format.
     * @type {number}
     * @memberof SaveSubTransaction
     */
    amount: number;
    /**
     * The payee for the subtransaction.
     * @type {string}
     * @memberof SaveSubTransaction
     */
    payee_id?: string | null;
    /**
     * The payee name.  If a `payee_name` value is provided and `payee_id` has a null value, the `payee_name` value will be used to resolve the payee by either (1) a matching payee rename rule (only if import_id is also specified on parent transaction) or (2) a payee with the same name or (3) creation of a new payee.
     * @type {string}
     * @memberof SaveSubTransaction
     */
    payee_name?: string | null;
    /**
     * The category for the subtransaction.  Credit Card Payment categories are not permitted and will be ignored if supplied.
     * @type {string}
     * @memberof SaveSubTransaction
     */
    category_id?: string | null;
    /**
     *
     * @type {string}
     * @memberof SaveSubTransaction
     */
    memo?: string | null;
}
/**
 *
 * @export
 * @interface SaveTransactionWithOptionalFields
 */
export interface SaveTransactionWithOptionalFields {
    /**
     *
     * @type {string}
     * @memberof SaveTransactionWithOptionalFields
     */
    account_id?: string | null;
    /**
     * The transaction date in ISO format (e.g. 2016-12-01).  Future dates (scheduled transactions) are not permitted.  Split transaction dates cannot be changed and if a different date is supplied it will be ignored.
     * @type {string}
     * @memberof SaveTransactionWithOptionalFields
     */
    date?: string | null;
    /**
     * The transaction amount in milliunits format.  Split transaction amounts cannot be changed and if a different amount is supplied it will be ignored.
     * @type {number}
     * @memberof SaveTransactionWithOptionalFields
     */
    amount?: number | null;
    /**
     * The payee for the transaction.  To create a transfer between two accounts, use the account transfer payee pointing to the target account.  Account transfer payees are specified as `tranfer_payee_id` on the account resource.
     * @type {string}
     * @memberof SaveTransactionWithOptionalFields
     */
    payee_id?: string | null;
    /**
     * The payee name.  If a `payee_name` value is provided and `payee_id` has a null value, the `payee_name` value will be used to resolve the payee by either (1) a matching payee rename rule (only if `import_id` is also specified) or (2) a payee with the same name or (3) creation of a new payee.
     * @type {string}
     * @memberof SaveTransactionWithOptionalFields
     */
    payee_name?: string | null;
    /**
     * The category for the transaction.  To configure a split transaction, you can specify null for `category_id` and provide a `subtransactions` array as part of the transaction object.  If an existing transaction is a split, the `category_id` cannot be changed.  Credit Card Payment categories are not permitted and will be ignored if supplied.
     * @type {string}
     * @memberof SaveTransactionWithOptionalFields
     */
    category_id?: string | null;
    /**
     *
     * @type {string}
     * @memberof SaveTransactionWithOptionalFields
     */
    memo?: string | null;
    /**
     * The cleared status of the transaction
     * @type {string}
     * @memberof SaveTransactionWithOptionalFields
     */
    cleared?: SaveTransactionWithOptionalFields.ClearedEnum | null;
    /**
     * Whether or not the transaction is approved.  If not supplied, transaction will be unapproved by default.
     * @type {boolean}
     * @memberof SaveTransactionWithOptionalFields
     */
    approved?: boolean | null;
    /**
     * The transaction flag
     * @type {string}
     * @memberof SaveTransactionWithOptionalFields
     */
    flag_color?: SaveTransactionWithOptionalFields.FlagColorEnum | null;
    /**
     * If specified, the new transaction will be assigned this `import_id` and considered \"imported\".  We will also attempt to match this imported transaction to an existing \"user-entered\" transation on the same account, with the same amount, and with a date +/-10 days from the imported transaction date.<br><br>Transactions imported through File Based Import or Direct Import (not through the API) are assigned an import_id in the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'. For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.  Using a consistent format will prevent duplicates through Direct Import and File Based Import.<br><br>If import_id is omitted or specified as null, the transaction will be treated as a \"user-entered\" transaction. As such, it will be eligible to be matched against transactions later being imported (via DI, FBI, or API).
     * @type {string}
     * @memberof SaveTransactionWithOptionalFields
     */
    import_id?: string | null;
    /**
     * An array of subtransactions to configure a transaction as a split.  Updating `subtransactions` on an existing split transaction is not supported.
     * @type {Array<SaveSubTransaction>}
     * @memberof SaveTransactionWithOptionalFields
     */
    subtransactions?: Array<SaveSubTransaction> | null;
}
/**
 * @export
 * @namespace SaveTransactionWithOptionalFields
 */
export declare namespace SaveTransactionWithOptionalFields {
    /**
     * @export
     * @enum {string}
     */
    enum ClearedEnum {
        Cleared,
        Uncleared,
        Reconciled
    }
    /**
     * @export
     * @enum {string}
     */
    enum FlagColorEnum {
        Red,
        Orange,
        Yellow,
        Green,
        Blue,
        Purple
    }
}
/**
 *
 * @export
 * @interface SaveTransactionsResponse
 */
export interface SaveTransactionsResponse {
    /**
     *
     * @type {SaveTransactionsResponseData}
     * @memberof SaveTransactionsResponse
     */
    data: SaveTransactionsResponseData;
}
/**
 *
 * @export
 * @interface SaveTransactionsResponseData
 */
export interface SaveTransactionsResponseData {
    /**
     * The transaction ids that were saved
     * @type {Array<string>}
     * @memberof SaveTransactionsResponseData
     */
    transaction_ids: Array<string>;
    /**
     * If a single transaction was specified, the transaction that was saved
     * @type {TransactionDetail}
     * @memberof SaveTransactionsResponseData
     */
    transaction?: TransactionDetail | null;
    /**
     * If multiple transactions were specified, the transactions that were saved
     * @type {Array<TransactionDetail>}
     * @memberof SaveTransactionsResponseData
     */
    transactions?: Array<TransactionDetail> | null;
    /**
     * If multiple transactions were specified, a list of import_ids that were not created because of an existing `import_id` found on the same account
     * @type {Array<string>}
     * @memberof SaveTransactionsResponseData
     */
    duplicate_import_ids?: Array<string> | null;
    /**
     * The knowledge of the server
     * @type {number}
     * @memberof SaveTransactionsResponseData
     */
    server_knowledge: number;
}
/**
 *
 * @export
 * @interface ScheduledSubTransaction
 */
export interface ScheduledSubTransaction {
    /**
     *
     * @type {string}
     * @memberof ScheduledSubTransaction
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof ScheduledSubTransaction
     */
    scheduled_transaction_id: string;
    /**
     * The scheduled subtransaction amount in milliunits format
     * @type {number}
     * @memberof ScheduledSubTransaction
     */
    amount: number;
    /**
     *
     * @type {string}
     * @memberof ScheduledSubTransaction
     */
    memo?: string | null;
    /**
     *
     * @type {string}
     * @memberof ScheduledSubTransaction
     */
    payee_id?: string | null;
    /**
     *
     * @type {string}
     * @memberof ScheduledSubTransaction
     */
    category_id?: string | null;
    /**
     * If a transfer, the account_id which the scheduled subtransaction transfers to
     * @type {string}
     * @memberof ScheduledSubTransaction
     */
    transfer_account_id?: string | null;
    /**
     * Whether or not the scheduled subtransaction has been deleted.  Deleted scheduled subtransactions will only be included in delta requests.
     * @type {boolean}
     * @memberof ScheduledSubTransaction
     */
    deleted: boolean;
}
/**
 *
 * @export
 * @interface ScheduledTransactionResponse
 */
export interface ScheduledTransactionResponse {
    /**
     *
     * @type {ScheduledTransactionResponseData}
     * @memberof ScheduledTransactionResponse
     */
    data: ScheduledTransactionResponseData;
}
/**
 *
 * @export
 * @interface ScheduledTransactionResponseData
 */
export interface ScheduledTransactionResponseData {
    /**
     *
     * @type {ScheduledTransactionDetail}
     * @memberof ScheduledTransactionResponseData
     */
    scheduled_transaction: ScheduledTransactionDetail;
}
/**
 *
 * @export
 * @interface ScheduledTransactionSummary
 */
export interface ScheduledTransactionSummary {
    /**
     *
     * @type {string}
     * @memberof ScheduledTransactionSummary
     */
    id: string;
    /**
     * The first date for which the Scheduled Transaction was scheduled.
     * @type {string}
     * @memberof ScheduledTransactionSummary
     */
    date_first: string;
    /**
     * The next date for which the Scheduled Transaction is scheduled.
     * @type {string}
     * @memberof ScheduledTransactionSummary
     */
    date_next: string;
    /**
     *
     * @type {string}
     * @memberof ScheduledTransactionSummary
     */
    frequency: ScheduledTransactionSummary.FrequencyEnum;
    /**
     * The scheduled transaction amount in milliunits format
     * @type {number}
     * @memberof ScheduledTransactionSummary
     */
    amount: number;
    /**
     *
     * @type {string}
     * @memberof ScheduledTransactionSummary
     */
    memo?: string | null;
    /**
     * The scheduled transaction flag
     * @type {string}
     * @memberof ScheduledTransactionSummary
     */
    flag_color?: ScheduledTransactionSummary.FlagColorEnum | null;
    /**
     *
     * @type {string}
     * @memberof ScheduledTransactionSummary
     */
    account_id: string;
    /**
     *
     * @type {string}
     * @memberof ScheduledTransactionSummary
     */
    payee_id?: string | null;
    /**
     *
     * @type {string}
     * @memberof ScheduledTransactionSummary
     */
    category_id?: string | null;
    /**
     * If a transfer, the account_id which the scheduled transaction transfers to
     * @type {string}
     * @memberof ScheduledTransactionSummary
     */
    transfer_account_id?: string | null;
    /**
     * Whether or not the scheduled transaction has been deleted.  Deleted scheduled transactions will only be included in delta requests.
     * @type {boolean}
     * @memberof ScheduledTransactionSummary
     */
    deleted: boolean;
}
/**
 * @export
 * @namespace ScheduledTransactionSummary
 */
export declare namespace ScheduledTransactionSummary {
    /**
     * @export
     * @enum {string}
     */
    enum FrequencyEnum {
        Never,
        Daily,
        Weekly,
        EveryOtherWeek,
        TwiceAMonth,
        Every4Weeks,
        Monthly,
        EveryOtherMonth,
        Every3Months,
        Every4Months,
        TwiceAYear,
        Yearly,
        EveryOtherYear
    }
    /**
     * @export
     * @enum {string}
     */
    enum FlagColorEnum {
        Red,
        Orange,
        Yellow,
        Green,
        Blue,
        Purple
    }
}
/**
 *
 * @export
 * @interface ScheduledTransactionsResponse
 */
export interface ScheduledTransactionsResponse {
    /**
     *
     * @type {ScheduledTransactionsResponseData}
     * @memberof ScheduledTransactionsResponse
     */
    data: ScheduledTransactionsResponseData;
}
/**
 *
 * @export
 * @interface ScheduledTransactionsResponseData
 */
export interface ScheduledTransactionsResponseData {
    /**
     *
     * @type {Array<ScheduledTransactionDetail>}
     * @memberof ScheduledTransactionsResponseData
     */
    scheduled_transactions: Array<ScheduledTransactionDetail>;
    /**
     * The knowledge of the server
     * @type {number}
     * @memberof ScheduledTransactionsResponseData
     */
    server_knowledge: number;
}
/**
 *
 * @export
 * @interface SubTransaction
 */
export interface SubTransaction {
    /**
     *
     * @type {string}
     * @memberof SubTransaction
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof SubTransaction
     */
    transaction_id: string;
    /**
     * The subtransaction amount in milliunits format
     * @type {number}
     * @memberof SubTransaction
     */
    amount: number;
    /**
     *
     * @type {string}
     * @memberof SubTransaction
     */
    memo?: string | null;
    /**
     *
     * @type {string}
     * @memberof SubTransaction
     */
    payee_id?: string | null;
    /**
     *
     * @type {string}
     * @memberof SubTransaction
     */
    payee_name?: string | null;
    /**
     *
     * @type {string}
     * @memberof SubTransaction
     */
    category_id?: string | null;
    /**
     *
     * @type {string}
     * @memberof SubTransaction
     */
    category_name?: string | null;
    /**
     * If a transfer, the account_id which the subtransaction transfers to
     * @type {string}
     * @memberof SubTransaction
     */
    transfer_account_id?: string | null;
    /**
     * If a transfer, the id of transaction on the other side of the transfer
     * @type {string}
     * @memberof SubTransaction
     */
    transfer_transaction_id?: string | null;
    /**
     * Whether or not the subtransaction has been deleted.  Deleted subtransactions will only be included in delta requests.
     * @type {boolean}
     * @memberof SubTransaction
     */
    deleted: boolean;
}
/**
 *
 * @export
 * @interface TransactionResponse
 */
export interface TransactionResponse {
    /**
     *
     * @type {TransactionResponseData}
     * @memberof TransactionResponse
     */
    data: TransactionResponseData;
}
/**
 *
 * @export
 * @interface TransactionResponseData
 */
export interface TransactionResponseData {
    /**
     *
     * @type {TransactionDetail}
     * @memberof TransactionResponseData
     */
    transaction: TransactionDetail;
}
/**
 *
 * @export
 * @interface TransactionSummary
 */
export interface TransactionSummary {
    /**
     *
     * @type {string}
     * @memberof TransactionSummary
     */
    id: string;
    /**
     * The transaction date in ISO format (e.g. 2016-12-01)
     * @type {string}
     * @memberof TransactionSummary
     */
    date: string;
    /**
     * The transaction amount in milliunits format
     * @type {number}
     * @memberof TransactionSummary
     */
    amount: number;
    /**
     *
     * @type {string}
     * @memberof TransactionSummary
     */
    memo?: string | null;
    /**
     * The cleared status of the transaction
     * @type {string}
     * @memberof TransactionSummary
     */
    cleared: TransactionSummary.ClearedEnum;
    /**
     * Whether or not the transaction is approved
     * @type {boolean}
     * @memberof TransactionSummary
     */
    approved: boolean;
    /**
     * The transaction flag
     * @type {string}
     * @memberof TransactionSummary
     */
    flag_color?: TransactionSummary.FlagColorEnum | null;
    /**
     *
     * @type {string}
     * @memberof TransactionSummary
     */
    account_id: string;
    /**
     *
     * @type {string}
     * @memberof TransactionSummary
     */
    payee_id?: string | null;
    /**
     *
     * @type {string}
     * @memberof TransactionSummary
     */
    category_id?: string | null;
    /**
     * If a transfer transaction, the account to which it transfers
     * @type {string}
     * @memberof TransactionSummary
     */
    transfer_account_id?: string | null;
    /**
     * If a transfer transaction, the id of transaction on the other side of the transfer
     * @type {string}
     * @memberof TransactionSummary
     */
    transfer_transaction_id?: string | null;
    /**
     * If transaction is matched, the id of the matched transaction
     * @type {string}
     * @memberof TransactionSummary
     */
    matched_transaction_id?: string | null;
    /**
     * If the transaction was imported, this field is a unique (by account) import identifier.  If this transaction was imported through File Based Import or Direct Import and not through the API, the import_id will have the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'.  For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.
     * @type {string}
     * @memberof TransactionSummary
     */
    import_id?: string | null;
    /**
     * If the transaction was imported, the payee name that was used when importing and before applying any payee rename rules
     * @type {string}
     * @memberof TransactionSummary
     */
    import_payee_name?: string | null;
    /**
     * If the transaction was imported, the original payee name as it appeared on the statement
     * @type {string}
     * @memberof TransactionSummary
     */
    import_payee_name_original?: string | null;
    /**
     * If the transaction is a debt/loan account transaction, the type of transaction
     * @type {string}
     * @memberof TransactionSummary
     */
    debt_transaction_type?: TransactionSummary.DebtTransactionTypeEnum | null;
    /**
     * Whether or not the transaction has been deleted.  Deleted transactions will only be included in delta requests.
     * @type {boolean}
     * @memberof TransactionSummary
     */
    deleted: boolean;
}
/**
 * @export
 * @namespace TransactionSummary
 */
export declare namespace TransactionSummary {
    /**
     * @export
     * @enum {string}
     */
    enum ClearedEnum {
        Cleared,
        Uncleared,
        Reconciled
    }
    /**
     * @export
     * @enum {string}
     */
    enum FlagColorEnum {
        Red,
        Orange,
        Yellow,
        Green,
        Blue,
        Purple
    }
    /**
     * @export
     * @enum {string}
     */
    enum DebtTransactionTypeEnum {
        Payment,
        Refund,
        Fee,
        Interest,
        Escrow,
        BalancedAdjustment,
        Credit,
        Charge
    }
}
/**
 *
 * @export
 * @interface TransactionsImportResponse
 */
export interface TransactionsImportResponse {
    /**
     *
     * @type {TransactionsImportResponseData}
     * @memberof TransactionsImportResponse
     */
    data: TransactionsImportResponseData;
}
/**
 *
 * @export
 * @interface TransactionsImportResponseData
 */
export interface TransactionsImportResponseData {
    /**
     * The list of transaction ids that were imported.
     * @type {Array<string>}
     * @memberof TransactionsImportResponseData
     */
    transaction_ids: Array<string>;
}
/**
 *
 * @export
 * @interface TransactionsResponse
 */
export interface TransactionsResponse {
    /**
     *
     * @type {TransactionsResponseData}
     * @memberof TransactionsResponse
     */
    data: TransactionsResponseData;
}
/**
 *
 * @export
 * @interface TransactionsResponseData
 */
export interface TransactionsResponseData {
    /**
     *
     * @type {Array<TransactionDetail>}
     * @memberof TransactionsResponseData
     */
    transactions: Array<TransactionDetail>;
    /**
     * The knowledge of the server
     * @type {number}
     * @memberof TransactionsResponseData
     */
    server_knowledge: number;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
    /**
     *
     * @type {string}
     * @memberof User
     */
    id: string;
}
/**
 *
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     *
     * @type {UserResponseData}
     * @memberof UserResponse
     */
    data: UserResponseData;
}
/**
 *
 * @export
 * @interface UserResponseData
 */
export interface UserResponseData {
    /**
     *
     * @type {User}
     * @memberof UserResponseData
     */
    user: User;
}
/**
 *
 * @export
 * @interface BudgetDetail
 */
export interface BudgetDetail {
    /**
     *
     * @type {string}
     * @memberof BudgetDetail
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof BudgetDetail
     */
    name: string;
    /**
     * The last time any changes were made to the budget from either a web or mobile client
     * @type {string}
     * @memberof BudgetDetail
     */
    last_modified_on?: string | null;
    /**
     * The earliest budget month
     * @type {string}
     * @memberof BudgetDetail
     */
    first_month?: string | null;
    /**
     * The latest budget month
     * @type {string}
     * @memberof BudgetDetail
     */
    last_month?: string | null;
    /**
     *
     * @type {DateFormat}
     * @memberof BudgetDetail
     */
    date_format?: DateFormat | null;
    /**
     *
     * @type {CurrencyFormat}
     * @memberof BudgetDetail
     */
    currency_format?: CurrencyFormat | null;
    /**
     *
     * @type {Array<Account>}
     * @memberof BudgetDetail
     */
    accounts?: Array<Account> | null;
    /**
     *
     * @type {Array<Payee>}
     * @memberof BudgetDetail
     */
    payees?: Array<Payee> | null;
    /**
     *
     * @type {Array<PayeeLocation>}
     * @memberof BudgetDetail
     */
    payee_locations?: Array<PayeeLocation> | null;
    /**
     *
     * @type {Array<CategoryGroup>}
     * @memberof BudgetDetail
     */
    category_groups?: Array<CategoryGroup> | null;
    /**
     *
     * @type {Array<Category>}
     * @memberof BudgetDetail
     */
    categories?: Array<Category> | null;
    /**
     *
     * @type {Array<MonthDetail>}
     * @memberof BudgetDetail
     */
    months?: Array<MonthDetail> | null;
    /**
     *
     * @type {Array<TransactionSummary>}
     * @memberof BudgetDetail
     */
    transactions?: Array<TransactionSummary> | null;
    /**
     *
     * @type {Array<SubTransaction>}
     * @memberof BudgetDetail
     */
    subtransactions?: Array<SubTransaction> | null;
    /**
     *
     * @type {Array<ScheduledTransactionSummary>}
     * @memberof BudgetDetail
     */
    scheduled_transactions?: Array<ScheduledTransactionSummary> | null;
    /**
     *
     * @type {Array<ScheduledSubTransaction>}
     * @memberof BudgetDetail
     */
    scheduled_subtransactions?: Array<ScheduledSubTransaction> | null;
}
/**
 *
 * @export
 * @interface CategoryGroupWithCategories
 */
export interface CategoryGroupWithCategories {
    /**
     *
     * @type {string}
     * @memberof CategoryGroupWithCategories
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof CategoryGroupWithCategories
     */
    name: string;
    /**
     * Whether or not the category group is hidden
     * @type {boolean}
     * @memberof CategoryGroupWithCategories
     */
    hidden: boolean;
    /**
     * Whether or not the category group has been deleted.  Deleted category groups will only be included in delta requests.
     * @type {boolean}
     * @memberof CategoryGroupWithCategories
     */
    deleted: boolean;
    /**
     * Category group categories.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
     * @type {Array<Category>}
     * @memberof CategoryGroupWithCategories
     */
    categories: Array<Category>;
}
/**
 *
 * @export
 * @interface HybridTransaction
 */
export interface HybridTransaction {
    /**
     *
     * @type {string}
     * @memberof HybridTransaction
     */
    id: string;
    /**
     * The transaction date in ISO format (e.g. 2016-12-01)
     * @type {string}
     * @memberof HybridTransaction
     */
    date: string;
    /**
     * The transaction amount in milliunits format
     * @type {number}
     * @memberof HybridTransaction
     */
    amount: number;
    /**
     *
     * @type {string}
     * @memberof HybridTransaction
     */
    memo?: string | null;
    /**
     * The cleared status of the transaction
     * @type {string}
     * @memberof HybridTransaction
     */
    cleared: HybridTransaction.ClearedEnum;
    /**
     * Whether or not the transaction is approved
     * @type {boolean}
     * @memberof HybridTransaction
     */
    approved: boolean;
    /**
     * The transaction flag
     * @type {string}
     * @memberof HybridTransaction
     */
    flag_color?: HybridTransaction.FlagColorEnum | null;
    /**
     *
     * @type {string}
     * @memberof HybridTransaction
     */
    account_id: string;
    /**
     *
     * @type {string}
     * @memberof HybridTransaction
     */
    payee_id?: string | null;
    /**
     *
     * @type {string}
     * @memberof HybridTransaction
     */
    category_id?: string | null;
    /**
     * If a transfer transaction, the account to which it transfers
     * @type {string}
     * @memberof HybridTransaction
     */
    transfer_account_id?: string | null;
    /**
     * If a transfer transaction, the id of transaction on the other side of the transfer
     * @type {string}
     * @memberof HybridTransaction
     */
    transfer_transaction_id?: string | null;
    /**
     * If transaction is matched, the id of the matched transaction
     * @type {string}
     * @memberof HybridTransaction
     */
    matched_transaction_id?: string | null;
    /**
     * If the transaction was imported, this field is a unique (by account) import identifier.  If this transaction was imported through File Based Import or Direct Import and not through the API, the import_id will have the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'.  For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.
     * @type {string}
     * @memberof HybridTransaction
     */
    import_id?: string | null;
    /**
     * If the transaction was imported, the payee name that was used when importing and before applying any payee rename rules
     * @type {string}
     * @memberof HybridTransaction
     */
    import_payee_name?: string | null;
    /**
     * If the transaction was imported, the original payee name as it appeared on the statement
     * @type {string}
     * @memberof HybridTransaction
     */
    import_payee_name_original?: string | null;
    /**
     * If the transaction is a debt/loan account transaction, the type of transaction
     * @type {string}
     * @memberof HybridTransaction
     */
    debt_transaction_type?: HybridTransaction.DebtTransactionTypeEnum | null;
    /**
     * Whether or not the transaction has been deleted.  Deleted transactions will only be included in delta requests.
     * @type {boolean}
     * @memberof HybridTransaction
     */
    deleted: boolean;
    /**
     * Whether the hybrid transaction represents a regular transaction or a subtransaction
     * @type {string}
     * @memberof HybridTransaction
     */
    type: HybridTransaction.TypeEnum;
    /**
     * For subtransaction types, this is the id of the parent transaction.  For transaction types, this id will be always be null.
     * @type {string}
     * @memberof HybridTransaction
     */
    parent_transaction_id?: string | null;
    /**
     *
     * @type {string}
     * @memberof HybridTransaction
     */
    account_name: string;
    /**
     *
     * @type {string}
     * @memberof HybridTransaction
     */
    payee_name?: string | null;
    /**
     *
     * @type {string}
     * @memberof HybridTransaction
     */
    category_name?: string | null;
}
/**
 * @export
 * @namespace HybridTransaction
 */
export declare namespace HybridTransaction {
    /**
     * @export
     * @enum {string}
     */
    enum ClearedEnum {
        Cleared,
        Uncleared,
        Reconciled
    }
    /**
     * @export
     * @enum {string}
     */
    enum FlagColorEnum {
        Red,
        Orange,
        Yellow,
        Green,
        Blue,
        Purple
    }
    /**
     * @export
     * @enum {string}
     */
    enum DebtTransactionTypeEnum {
        Payment,
        Refund,
        Fee,
        Interest,
        Escrow,
        BalancedAdjustment,
        Credit,
        Charge
    }
    /**
     * @export
     * @enum {string}
     */
    enum TypeEnum {
        Transaction,
        Subtransaction
    }
}
/**
 *
 * @export
 * @interface MonthDetail
 */
export interface MonthDetail {
    /**
     *
     * @type {string}
     * @memberof MonthDetail
     */
    month: string;
    /**
     *
     * @type {string}
     * @memberof MonthDetail
     */
    note?: string | null;
    /**
     * The total amount of transactions categorized to 'Inflow: Ready to Assign' in the month
     * @type {number}
     * @memberof MonthDetail
     */
    income: number;
    /**
     * The total amount budgeted in the month
     * @type {number}
     * @memberof MonthDetail
     */
    budgeted: number;
    /**
     * The total amount of transactions in the month, excluding those categorized to 'Inflow: Ready to Assign'
     * @type {number}
     * @memberof MonthDetail
     */
    activity: number;
    /**
     * The available amount for 'Ready to Assign'
     * @type {number}
     * @memberof MonthDetail
     */
    to_be_budgeted: number;
    /**
     * The Age of Money as of the month
     * @type {number}
     * @memberof MonthDetail
     */
    age_of_money?: number | null;
    /**
     * Whether or not the month has been deleted.  Deleted months will only be included in delta requests.
     * @type {boolean}
     * @memberof MonthDetail
     */
    deleted: boolean;
    /**
     * The budget month categories.  Amounts (budgeted, activity, balance, etc.) are specific to the {month} parameter specified.
     * @type {Array<Category>}
     * @memberof MonthDetail
     */
    categories: Array<Category>;
}
/**
 *
 * @export
 * @interface SaveTransaction
 */
export interface SaveTransaction {
    /**
     *
     * @type {string}
     * @memberof SaveTransaction
     */
    account_id?: string | null;
    /**
     * The transaction date in ISO format (e.g. 2016-12-01).  Future dates (scheduled transactions) are not permitted.  Split transaction dates cannot be changed and if a different date is supplied it will be ignored.
     * @type {string}
     * @memberof SaveTransaction
     */
    date?: string | null;
    /**
     * The transaction amount in milliunits format.  Split transaction amounts cannot be changed and if a different amount is supplied it will be ignored.
     * @type {number}
     * @memberof SaveTransaction
     */
    amount?: number | null;
    /**
     * The payee for the transaction.  To create a transfer between two accounts, use the account transfer payee pointing to the target account.  Account transfer payees are specified as `tranfer_payee_id` on the account resource.
     * @type {string}
     * @memberof SaveTransaction
     */
    payee_id?: string | null;
    /**
     * The payee name.  If a `payee_name` value is provided and `payee_id` has a null value, the `payee_name` value will be used to resolve the payee by either (1) a matching payee rename rule (only if `import_id` is also specified) or (2) a payee with the same name or (3) creation of a new payee.
     * @type {string}
     * @memberof SaveTransaction
     */
    payee_name?: string | null;
    /**
     * The category for the transaction.  To configure a split transaction, you can specify null for `category_id` and provide a `subtransactions` array as part of the transaction object.  If an existing transaction is a split, the `category_id` cannot be changed.  Credit Card Payment categories are not permitted and will be ignored if supplied.
     * @type {string}
     * @memberof SaveTransaction
     */
    category_id?: string | null;
    /**
     *
     * @type {string}
     * @memberof SaveTransaction
     */
    memo?: string | null;
    /**
     * The cleared status of the transaction
     * @type {string}
     * @memberof SaveTransaction
     */
    cleared?: SaveTransaction.ClearedEnum | null;
    /**
     * Whether or not the transaction is approved.  If not supplied, transaction will be unapproved by default.
     * @type {boolean}
     * @memberof SaveTransaction
     */
    approved?: boolean | null;
    /**
     * The transaction flag
     * @type {string}
     * @memberof SaveTransaction
     */
    flag_color?: SaveTransaction.FlagColorEnum | null;
    /**
     * If specified, the new transaction will be assigned this `import_id` and considered \"imported\".  We will also attempt to match this imported transaction to an existing \"user-entered\" transation on the same account, with the same amount, and with a date +/-10 days from the imported transaction date.<br><br>Transactions imported through File Based Import or Direct Import (not through the API) are assigned an import_id in the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'. For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.  Using a consistent format will prevent duplicates through Direct Import and File Based Import.<br><br>If import_id is omitted or specified as null, the transaction will be treated as a \"user-entered\" transaction. As such, it will be eligible to be matched against transactions later being imported (via DI, FBI, or API).
     * @type {string}
     * @memberof SaveTransaction
     */
    import_id?: string | null;
    /**
     * An array of subtransactions to configure a transaction as a split.  Updating `subtransactions` on an existing split transaction is not supported.
     * @type {Array<SaveSubTransaction>}
     * @memberof SaveTransaction
     */
    subtransactions?: Array<SaveSubTransaction> | null;
}
/**
 * @export
 * @namespace SaveTransaction
 */
export declare namespace SaveTransaction {
    /**
     * @export
     * @enum {string}
     */
    enum ClearedEnum {
        Cleared,
        Uncleared,
        Reconciled
    }
    /**
     * @export
     * @enum {string}
     */
    enum FlagColorEnum {
        Red,
        Orange,
        Yellow,
        Green,
        Blue,
        Purple
    }
}
/**
 *
 * @export
 * @interface SaveTransactionWithId
 */
export interface SaveTransactionWithId {
    /**
     *
     * @type {string}
     * @memberof SaveTransactionWithId
     */
    account_id?: string | null;
    /**
     * The transaction date in ISO format (e.g. 2016-12-01).  Future dates (scheduled transactions) are not permitted.  Split transaction dates cannot be changed and if a different date is supplied it will be ignored.
     * @type {string}
     * @memberof SaveTransactionWithId
     */
    date?: string | null;
    /**
     * The transaction amount in milliunits format.  Split transaction amounts cannot be changed and if a different amount is supplied it will be ignored.
     * @type {number}
     * @memberof SaveTransactionWithId
     */
    amount?: number | null;
    /**
     * The payee for the transaction.  To create a transfer between two accounts, use the account transfer payee pointing to the target account.  Account transfer payees are specified as `tranfer_payee_id` on the account resource.
     * @type {string}
     * @memberof SaveTransactionWithId
     */
    payee_id?: string | null;
    /**
     * The payee name.  If a `payee_name` value is provided and `payee_id` has a null value, the `payee_name` value will be used to resolve the payee by either (1) a matching payee rename rule (only if `import_id` is also specified) or (2) a payee with the same name or (3) creation of a new payee.
     * @type {string}
     * @memberof SaveTransactionWithId
     */
    payee_name?: string | null;
    /**
     * The category for the transaction.  To configure a split transaction, you can specify null for `category_id` and provide a `subtransactions` array as part of the transaction object.  If an existing transaction is a split, the `category_id` cannot be changed.  Credit Card Payment categories are not permitted and will be ignored if supplied.
     * @type {string}
     * @memberof SaveTransactionWithId
     */
    category_id?: string | null;
    /**
     *
     * @type {string}
     * @memberof SaveTransactionWithId
     */
    memo?: string | null;
    /**
     * The cleared status of the transaction
     * @type {string}
     * @memberof SaveTransactionWithId
     */
    cleared?: SaveTransactionWithId.ClearedEnum | null;
    /**
     * Whether or not the transaction is approved.  If not supplied, transaction will be unapproved by default.
     * @type {boolean}
     * @memberof SaveTransactionWithId
     */
    approved?: boolean | null;
    /**
     * The transaction flag
     * @type {string}
     * @memberof SaveTransactionWithId
     */
    flag_color?: SaveTransactionWithId.FlagColorEnum | null;
    /**
     * If specified, the new transaction will be assigned this `import_id` and considered \"imported\".  We will also attempt to match this imported transaction to an existing \"user-entered\" transation on the same account, with the same amount, and with a date +/-10 days from the imported transaction date.<br><br>Transactions imported through File Based Import or Direct Import (not through the API) are assigned an import_id in the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'. For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.  Using a consistent format will prevent duplicates through Direct Import and File Based Import.<br><br>If import_id is omitted or specified as null, the transaction will be treated as a \"user-entered\" transaction. As such, it will be eligible to be matched against transactions later being imported (via DI, FBI, or API).
     * @type {string}
     * @memberof SaveTransactionWithId
     */
    import_id?: string | null;
    /**
     * An array of subtransactions to configure a transaction as a split.  Updating `subtransactions` on an existing split transaction is not supported.
     * @type {Array<SaveSubTransaction>}
     * @memberof SaveTransactionWithId
     */
    subtransactions?: Array<SaveSubTransaction> | null;
    /**
     *
     * @type {string}
     * @memberof SaveTransactionWithId
     */
    id?: string | null;
}
/**
 * @export
 * @namespace SaveTransactionWithId
 */
export declare namespace SaveTransactionWithId {
    /**
     * @export
     * @enum {string}
     */
    enum ClearedEnum {
        Cleared,
        Uncleared,
        Reconciled
    }
    /**
     * @export
     * @enum {string}
     */
    enum FlagColorEnum {
        Red,
        Orange,
        Yellow,
        Green,
        Blue,
        Purple
    }
}
/**
 *
 * @export
 * @interface ScheduledTransactionDetail
 */
export interface ScheduledTransactionDetail {
    /**
     *
     * @type {string}
     * @memberof ScheduledTransactionDetail
     */
    id: string;
    /**
     * The first date for which the Scheduled Transaction was scheduled.
     * @type {string}
     * @memberof ScheduledTransactionDetail
     */
    date_first: string;
    /**
     * The next date for which the Scheduled Transaction is scheduled.
     * @type {string}
     * @memberof ScheduledTransactionDetail
     */
    date_next: string;
    /**
     *
     * @type {string}
     * @memberof ScheduledTransactionDetail
     */
    frequency: ScheduledTransactionDetail.FrequencyEnum;
    /**
     * The scheduled transaction amount in milliunits format
     * @type {number}
     * @memberof ScheduledTransactionDetail
     */
    amount: number;
    /**
     *
     * @type {string}
     * @memberof ScheduledTransactionDetail
     */
    memo?: string | null;
    /**
     * The scheduled transaction flag
     * @type {string}
     * @memberof ScheduledTransactionDetail
     */
    flag_color?: ScheduledTransactionDetail.FlagColorEnum | null;
    /**
     *
     * @type {string}
     * @memberof ScheduledTransactionDetail
     */
    account_id: string;
    /**
     *
     * @type {string}
     * @memberof ScheduledTransactionDetail
     */
    payee_id?: string | null;
    /**
     *
     * @type {string}
     * @memberof ScheduledTransactionDetail
     */
    category_id?: string | null;
    /**
     * If a transfer, the account_id which the scheduled transaction transfers to
     * @type {string}
     * @memberof ScheduledTransactionDetail
     */
    transfer_account_id?: string | null;
    /**
     * Whether or not the scheduled transaction has been deleted.  Deleted scheduled transactions will only be included in delta requests.
     * @type {boolean}
     * @memberof ScheduledTransactionDetail
     */
    deleted: boolean;
    /**
     *
     * @type {string}
     * @memberof ScheduledTransactionDetail
     */
    account_name: string;
    /**
     *
     * @type {string}
     * @memberof ScheduledTransactionDetail
     */
    payee_name?: string | null;
    /**
     *
     * @type {string}
     * @memberof ScheduledTransactionDetail
     */
    category_name?: string | null;
    /**
     * If a split scheduled transaction, the subtransactions.
     * @type {Array<ScheduledSubTransaction>}
     * @memberof ScheduledTransactionDetail
     */
    subtransactions: Array<ScheduledSubTransaction>;
}
/**
 * @export
 * @namespace ScheduledTransactionDetail
 */
export declare namespace ScheduledTransactionDetail {
    /**
     * @export
     * @enum {string}
     */
    enum FrequencyEnum {
        Never,
        Daily,
        Weekly,
        EveryOtherWeek,
        TwiceAMonth,
        Every4Weeks,
        Monthly,
        EveryOtherMonth,
        Every3Months,
        Every4Months,
        TwiceAYear,
        Yearly,
        EveryOtherYear
    }
    /**
     * @export
     * @enum {string}
     */
    enum FlagColorEnum {
        Red,
        Orange,
        Yellow,
        Green,
        Blue,
        Purple
    }
}
/**
 *
 * @export
 * @interface TransactionDetail
 */
export interface TransactionDetail {
    /**
     *
     * @type {string}
     * @memberof TransactionDetail
     */
    id: string;
    /**
     * The transaction date in ISO format (e.g. 2016-12-01)
     * @type {string}
     * @memberof TransactionDetail
     */
    date: string;
    /**
     * The transaction amount in milliunits format
     * @type {number}
     * @memberof TransactionDetail
     */
    amount: number;
    /**
     *
     * @type {string}
     * @memberof TransactionDetail
     */
    memo?: string | null;
    /**
     * The cleared status of the transaction
     * @type {string}
     * @memberof TransactionDetail
     */
    cleared: TransactionDetail.ClearedEnum;
    /**
     * Whether or not the transaction is approved
     * @type {boolean}
     * @memberof TransactionDetail
     */
    approved: boolean;
    /**
     * The transaction flag
     * @type {string}
     * @memberof TransactionDetail
     */
    flag_color?: TransactionDetail.FlagColorEnum | null;
    /**
     *
     * @type {string}
     * @memberof TransactionDetail
     */
    account_id: string;
    /**
     *
     * @type {string}
     * @memberof TransactionDetail
     */
    payee_id?: string | null;
    /**
     *
     * @type {string}
     * @memberof TransactionDetail
     */
    category_id?: string | null;
    /**
     * If a transfer transaction, the account to which it transfers
     * @type {string}
     * @memberof TransactionDetail
     */
    transfer_account_id?: string | null;
    /**
     * If a transfer transaction, the id of transaction on the other side of the transfer
     * @type {string}
     * @memberof TransactionDetail
     */
    transfer_transaction_id?: string | null;
    /**
     * If transaction is matched, the id of the matched transaction
     * @type {string}
     * @memberof TransactionDetail
     */
    matched_transaction_id?: string | null;
    /**
     * If the transaction was imported, this field is a unique (by account) import identifier.  If this transaction was imported through File Based Import or Direct Import and not through the API, the import_id will have the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'.  For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.
     * @type {string}
     * @memberof TransactionDetail
     */
    import_id?: string | null;
    /**
     * If the transaction was imported, the payee name that was used when importing and before applying any payee rename rules
     * @type {string}
     * @memberof TransactionDetail
     */
    import_payee_name?: string | null;
    /**
     * If the transaction was imported, the original payee name as it appeared on the statement
     * @type {string}
     * @memberof TransactionDetail
     */
    import_payee_name_original?: string | null;
    /**
     * If the transaction is a debt/loan account transaction, the type of transaction
     * @type {string}
     * @memberof TransactionDetail
     */
    debt_transaction_type?: TransactionDetail.DebtTransactionTypeEnum | null;
    /**
     * Whether or not the transaction has been deleted.  Deleted transactions will only be included in delta requests.
     * @type {boolean}
     * @memberof TransactionDetail
     */
    deleted: boolean;
    /**
     *
     * @type {string}
     * @memberof TransactionDetail
     */
    account_name: string;
    /**
     *
     * @type {string}
     * @memberof TransactionDetail
     */
    payee_name?: string | null;
    /**
     *
     * @type {string}
     * @memberof TransactionDetail
     */
    category_name?: string | null;
    /**
     * If a split transaction, the subtransactions.
     * @type {Array<SubTransaction>}
     * @memberof TransactionDetail
     */
    subtransactions: Array<SubTransaction>;
}
/**
 * @export
 * @namespace TransactionDetail
 */
export declare namespace TransactionDetail {
    /**
     * @export
     * @enum {string}
     */
    enum ClearedEnum {
        Cleared,
        Uncleared,
        Reconciled
    }
    /**
     * @export
     * @enum {string}
     */
    enum FlagColorEnum {
        Red,
        Orange,
        Yellow,
        Green,
        Blue,
        Purple
    }
    /**
     * @export
     * @enum {string}
     */
    enum DebtTransactionTypeEnum {
        Payment,
        Refund,
        Fee,
        Interest,
        Escrow,
        BalancedAdjustment,
        Credit,
        Charge
    }
}
/**
 * AccountsApi - fetch parameter creator
 * @export
 */
export declare const AccountsApiFetchParamCreator: (configuration: Configuration) => {
    /**
     * Creates a new account
     * @summary Create a new account
     * @param {string} budget_id - The id of the budget (\"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget)
     * @param {PostAccountWrapper} data - The account to create.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    createAccount(budget_id: string, data: PostAccountWrapper, options?: any): FetchArgs;
    /**
     * Returns a single account
     * @summary Single account
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} account_id - The id of the account
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getAccountById(budget_id: string, account_id: string, options?: any): FetchArgs;
    /**
     * Returns all accounts
     * @summary Account list
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getAccounts(budget_id: string, last_knowledge_of_server?: number | undefined, options?: any): FetchArgs;
};
/**
 * AccountsApi - functional programming interface
 * @export
 */
export declare const AccountsApiFp: (configuration: Configuration) => {
    /**
     * Creates a new account
     * @summary Create a new account
     * @param {string} budget_id - The id of the budget (\"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget)
     * @param {PostAccountWrapper} data - The account to create.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    createAccount(budget_id: string, data: PostAccountWrapper, options?: any): (fetchFunction?: FetchAPI | undefined) => Promise<AccountResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns a single account
     * @summary Single account
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} account_id - The id of the account
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getAccountById(budget_id: string, account_id: string, options?: any): (fetchFunction?: FetchAPI | undefined) => Promise<AccountResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns all accounts
     * @summary Account list
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getAccounts(budget_id: string, last_knowledge_of_server?: number | undefined, options?: any): (fetchFunction?: FetchAPI | undefined) => Promise<AccountsResponse & {
        rateLimit: string | null;
    }>;
};
/**
 * AccountsApi - factory interface
 * @export
 */
export declare const AccountsApiFactory: (configuration: Configuration) => {
    /**
     * Creates a new account
     * @summary Create a new account
     * @param {string} budget_id - The id of the budget (\"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget)
     * @param {PostAccountWrapper} data - The account to create.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    createAccount(budget_id: string, data: PostAccountWrapper, options?: any): Promise<AccountResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns a single account
     * @summary Single account
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} account_id - The id of the account
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getAccountById(budget_id: string, account_id: string, options?: any): Promise<AccountResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns all accounts
     * @summary Account list
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getAccounts(budget_id: string, last_knowledge_of_server?: number | undefined, options?: any): Promise<AccountsResponse & {
        rateLimit: string | null;
    }>;
};
/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export declare class AccountsApi extends BaseAPI {
    /**
     * Creates a new account
     * @summary Create a new account
     * @param {string} budget_id - The id of the budget (\"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget)
     * @param {PostAccountWrapper} data - The account to create.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    createAccount(budget_id: string, data: PostAccountWrapper, options?: any): Promise<AccountResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns a single account
     * @summary Single account
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} account_id - The id of the account
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    getAccountById(budget_id: string, account_id: string, options?: any): Promise<AccountResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns all accounts
     * @summary Account list
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    getAccounts(budget_id: string, last_knowledge_of_server?: number, options?: any): Promise<AccountsResponse & {
        rateLimit: string | null;
    }>;
}
/**
 * BudgetsApi - fetch parameter creator
 * @export
 */
export declare const BudgetsApiFetchParamCreator: (configuration: Configuration) => {
    /**
     * Returns a single budget with all related entities.  This resource is effectively a full budget export.
     * @summary Single budget
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getBudgetById(budget_id: string, last_knowledge_of_server?: number | undefined, options?: any): FetchArgs;
    /**
     * Returns settings for a budget
     * @summary Budget Settings
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getBudgetSettingsById(budget_id: string, options?: any): FetchArgs;
    /**
     * Returns budgets list with summary information
     * @summary List budgets
     * @param {boolean} [include_accounts] - Whether to include the list of budget accounts
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getBudgets(include_accounts?: boolean | undefined, options?: any): FetchArgs;
};
/**
 * BudgetsApi - functional programming interface
 * @export
 */
export declare const BudgetsApiFp: (configuration: Configuration) => {
    /**
     * Returns a single budget with all related entities.  This resource is effectively a full budget export.
     * @summary Single budget
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getBudgetById(budget_id: string, last_knowledge_of_server?: number | undefined, options?: any): (fetchFunction?: FetchAPI | undefined) => Promise<BudgetDetailResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns settings for a budget
     * @summary Budget Settings
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getBudgetSettingsById(budget_id: string, options?: any): (fetchFunction?: FetchAPI | undefined) => Promise<BudgetSettingsResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns budgets list with summary information
     * @summary List budgets
     * @param {boolean} [include_accounts] - Whether to include the list of budget accounts
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getBudgets(include_accounts?: boolean | undefined, options?: any): (fetchFunction?: FetchAPI | undefined) => Promise<BudgetSummaryResponse & {
        rateLimit: string | null;
    }>;
};
/**
 * BudgetsApi - factory interface
 * @export
 */
export declare const BudgetsApiFactory: (configuration: Configuration) => {
    /**
     * Returns a single budget with all related entities.  This resource is effectively a full budget export.
     * @summary Single budget
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getBudgetById(budget_id: string, last_knowledge_of_server?: number | undefined, options?: any): Promise<BudgetDetailResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns settings for a budget
     * @summary Budget Settings
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getBudgetSettingsById(budget_id: string, options?: any): Promise<BudgetSettingsResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns budgets list with summary information
     * @summary List budgets
     * @param {boolean} [include_accounts] - Whether to include the list of budget accounts
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getBudgets(include_accounts?: boolean | undefined, options?: any): Promise<BudgetSummaryResponse & {
        rateLimit: string | null;
    }>;
};
/**
 * BudgetsApi - object-oriented interface
 * @export
 * @class BudgetsApi
 * @extends {BaseAPI}
 */
export declare class BudgetsApi extends BaseAPI {
    /**
     * Returns a single budget with all related entities.  This resource is effectively a full budget export.
     * @summary Single budget
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     * @memberof BudgetsApi
     */
    getBudgetById(budget_id: string, last_knowledge_of_server?: number, options?: any): Promise<BudgetDetailResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns settings for a budget
     * @summary Budget Settings
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     * @memberof BudgetsApi
     */
    getBudgetSettingsById(budget_id: string, options?: any): Promise<BudgetSettingsResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns budgets list with summary information
     * @summary List budgets
     * @param {boolean} [include_accounts] - Whether to include the list of budget accounts
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     * @memberof BudgetsApi
     */
    getBudgets(include_accounts?: boolean, options?: any): Promise<BudgetSummaryResponse & {
        rateLimit: string | null;
    }>;
}
/**
 * CategoriesApi - fetch parameter creator
 * @export
 */
export declare const CategoriesApiFetchParamCreator: (configuration: Configuration) => {
    /**
     * Returns all categories grouped by category group.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
     * @summary List categories
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getCategories(budget_id: string, last_knowledge_of_server?: number | undefined, options?: any): FetchArgs;
    /**
     * Returns a single category.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
     * @summary Single category
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} category_id - The id of the category
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getCategoryById(budget_id: string, category_id: string, options?: any): FetchArgs;
    /**
     * Returns a single category for a specific budget month.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
     * @summary Single category for a specific budget month
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {Date} month - The budget month in ISO format (e.g. 2016-12-01) (\"current\" can also be used to specify the current calendar month (UTC))
     * @param {string} category_id - The id of the category
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getMonthCategoryById(budget_id: string, month: Date | string, category_id: string, options?: any): FetchArgs;
    /**
     * Update a category for a specific month.  Only `budgeted` amount can be updated.
     * @summary Update a category for a specific month
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {Date} month - The budget month in ISO format (e.g. 2016-12-01) (\"current\" can also be used to specify the current calendar month (UTC))
     * @param {string} category_id - The id of the category
     * @param {PatchMonthCategoryWrapper} data - The category to update.  Only `budgeted` amount can be updated and any other fields specified will be ignored.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    updateMonthCategory(budget_id: string, month: Date | string, category_id: string, data: PatchMonthCategoryWrapper, options?: any): FetchArgs;
};
/**
 * CategoriesApi - functional programming interface
 * @export
 */
export declare const CategoriesApiFp: (configuration: Configuration) => {
    /**
     * Returns all categories grouped by category group.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
     * @summary List categories
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getCategories(budget_id: string, last_knowledge_of_server?: number | undefined, options?: any): (fetchFunction?: FetchAPI | undefined) => Promise<CategoriesResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns a single category.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
     * @summary Single category
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} category_id - The id of the category
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getCategoryById(budget_id: string, category_id: string, options?: any): (fetchFunction?: FetchAPI | undefined) => Promise<CategoryResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns a single category for a specific budget month.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
     * @summary Single category for a specific budget month
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {Date} month - The budget month in ISO format (e.g. 2016-12-01) (\"current\" can also be used to specify the current calendar month (UTC))
     * @param {string} category_id - The id of the category
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getMonthCategoryById(budget_id: string, month: Date | string, category_id: string, options?: any): (fetchFunction?: FetchAPI | undefined) => Promise<CategoryResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Update a category for a specific month.  Only `budgeted` amount can be updated.
     * @summary Update a category for a specific month
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {Date} month - The budget month in ISO format (e.g. 2016-12-01) (\"current\" can also be used to specify the current calendar month (UTC))
     * @param {string} category_id - The id of the category
     * @param {PatchMonthCategoryWrapper} data - The category to update.  Only `budgeted` amount can be updated and any other fields specified will be ignored.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    updateMonthCategory(budget_id: string, month: Date | string, category_id: string, data: PatchMonthCategoryWrapper, options?: any): (fetchFunction?: FetchAPI | undefined) => Promise<SaveCategoryResponse & {
        rateLimit: string | null;
    }>;
};
/**
 * CategoriesApi - factory interface
 * @export
 */
export declare const CategoriesApiFactory: (configuration: Configuration) => {
    /**
     * Returns all categories grouped by category group.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
     * @summary List categories
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getCategories(budget_id: string, last_knowledge_of_server?: number | undefined, options?: any): Promise<CategoriesResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns a single category.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
     * @summary Single category
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} category_id - The id of the category
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getCategoryById(budget_id: string, category_id: string, options?: any): Promise<CategoryResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns a single category for a specific budget month.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
     * @summary Single category for a specific budget month
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {Date} month - The budget month in ISO format (e.g. 2016-12-01) (\"current\" can also be used to specify the current calendar month (UTC))
     * @param {string} category_id - The id of the category
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getMonthCategoryById(budget_id: string, month: Date | string, category_id: string, options?: any): Promise<CategoryResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Update a category for a specific month.  Only `budgeted` amount can be updated.
     * @summary Update a category for a specific month
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {Date} month - The budget month in ISO format (e.g. 2016-12-01) (\"current\" can also be used to specify the current calendar month (UTC))
     * @param {string} category_id - The id of the category
     * @param {PatchMonthCategoryWrapper} data - The category to update.  Only `budgeted` amount can be updated and any other fields specified will be ignored.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    updateMonthCategory(budget_id: string, month: Date | string, category_id: string, data: PatchMonthCategoryWrapper, options?: any): Promise<SaveCategoryResponse & {
        rateLimit: string | null;
    }>;
};
/**
 * CategoriesApi - object-oriented interface
 * @export
 * @class CategoriesApi
 * @extends {BaseAPI}
 */
export declare class CategoriesApi extends BaseAPI {
    /**
     * Returns all categories grouped by category group.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
     * @summary List categories
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    getCategories(budget_id: string, last_knowledge_of_server?: number, options?: any): Promise<CategoriesResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns a single category.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
     * @summary Single category
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} category_id - The id of the category
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    getCategoryById(budget_id: string, category_id: string, options?: any): Promise<CategoryResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns a single category for a specific budget month.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
     * @summary Single category for a specific budget month
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {Date} month - The budget month in ISO format (e.g. 2016-12-01) (\"current\" can also be used to specify the current calendar month (UTC))
     * @param {string} category_id - The id of the category
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    getMonthCategoryById(budget_id: string, month: Date | string, category_id: string, options?: any): Promise<CategoryResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Update a category for a specific month.  Only `budgeted` amount can be updated.
     * @summary Update a category for a specific month
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {Date} month - The budget month in ISO format (e.g. 2016-12-01) (\"current\" can also be used to specify the current calendar month (UTC))
     * @param {string} category_id - The id of the category
     * @param {PatchMonthCategoryWrapper} data - The category to update.  Only `budgeted` amount can be updated and any other fields specified will be ignored.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    updateMonthCategory(budget_id: string, month: Date | string, category_id: string, data: PatchMonthCategoryWrapper, options?: any): Promise<SaveCategoryResponse & {
        rateLimit: string | null;
    }>;
}
/**
 * DeprecatedApi - fetch parameter creator
 * @export
 */
export declare const DeprecatedApiFetchParamCreator: (configuration: Configuration) => {
    /**
     * Creates multiple transactions.  Although this endpoint is still supported, it is recommended to use 'POST /budgets/{budget_id}/transactions' to create multiple transactions.
     * @summary Bulk create transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {BulkTransactions} transactions - The list of transactions to create
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    bulkCreateTransactions(budget_id: string, transactions: BulkTransactions, options?: any): FetchArgs;
};
/**
 * DeprecatedApi - functional programming interface
 * @export
 */
export declare const DeprecatedApiFp: (configuration: Configuration) => {
    /**
     * Creates multiple transactions.  Although this endpoint is still supported, it is recommended to use 'POST /budgets/{budget_id}/transactions' to create multiple transactions.
     * @summary Bulk create transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {BulkTransactions} transactions - The list of transactions to create
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    bulkCreateTransactions(budget_id: string, transactions: BulkTransactions, options?: any): (fetchFunction?: FetchAPI | undefined) => Promise<BulkResponse & {
        rateLimit: string | null;
    }>;
};
/**
 * DeprecatedApi - factory interface
 * @export
 */
export declare const DeprecatedApiFactory: (configuration: Configuration) => {
    /**
     * Creates multiple transactions.  Although this endpoint is still supported, it is recommended to use 'POST /budgets/{budget_id}/transactions' to create multiple transactions.
     * @summary Bulk create transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {BulkTransactions} transactions - The list of transactions to create
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    bulkCreateTransactions(budget_id: string, transactions: BulkTransactions, options?: any): Promise<BulkResponse & {
        rateLimit: string | null;
    }>;
};
/**
 * DeprecatedApi - object-oriented interface
 * @export
 * @class DeprecatedApi
 * @extends {BaseAPI}
 */
export declare class DeprecatedApi extends BaseAPI {
    /**
     * Creates multiple transactions.  Although this endpoint is still supported, it is recommended to use 'POST /budgets/{budget_id}/transactions' to create multiple transactions.
     * @summary Bulk create transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {BulkTransactions} transactions - The list of transactions to create
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     * @memberof DeprecatedApi
     */
    bulkCreateTransactions(budget_id: string, transactions: BulkTransactions, options?: any): Promise<BulkResponse & {
        rateLimit: string | null;
    }>;
}
/**
 * MonthsApi - fetch parameter creator
 * @export
 */
export declare const MonthsApiFetchParamCreator: (configuration: Configuration) => {
    /**
     * Returns a single budget month
     * @summary Single budget month
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {Date} month - The budget month in ISO format (e.g. 2016-12-01) (\"current\" can also be used to specify the current calendar month (UTC))
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getBudgetMonth(budget_id: string, month: Date | string, options?: any): FetchArgs;
    /**
     * Returns all budget months
     * @summary List budget months
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getBudgetMonths(budget_id: string, last_knowledge_of_server?: number | undefined, options?: any): FetchArgs;
};
/**
 * MonthsApi - functional programming interface
 * @export
 */
export declare const MonthsApiFp: (configuration: Configuration) => {
    /**
     * Returns a single budget month
     * @summary Single budget month
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {Date} month - The budget month in ISO format (e.g. 2016-12-01) (\"current\" can also be used to specify the current calendar month (UTC))
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getBudgetMonth(budget_id: string, month: Date | string, options?: any): (fetchFunction?: FetchAPI | undefined) => Promise<MonthDetailResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns all budget months
     * @summary List budget months
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getBudgetMonths(budget_id: string, last_knowledge_of_server?: number | undefined, options?: any): (fetchFunction?: FetchAPI | undefined) => Promise<MonthSummariesResponse & {
        rateLimit: string | null;
    }>;
};
/**
 * MonthsApi - factory interface
 * @export
 */
export declare const MonthsApiFactory: (configuration: Configuration) => {
    /**
     * Returns a single budget month
     * @summary Single budget month
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {Date} month - The budget month in ISO format (e.g. 2016-12-01) (\"current\" can also be used to specify the current calendar month (UTC))
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getBudgetMonth(budget_id: string, month: Date | string, options?: any): Promise<MonthDetailResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns all budget months
     * @summary List budget months
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getBudgetMonths(budget_id: string, last_knowledge_of_server?: number | undefined, options?: any): Promise<MonthSummariesResponse & {
        rateLimit: string | null;
    }>;
};
/**
 * MonthsApi - object-oriented interface
 * @export
 * @class MonthsApi
 * @extends {BaseAPI}
 */
export declare class MonthsApi extends BaseAPI {
    /**
     * Returns a single budget month
     * @summary Single budget month
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {Date} month - The budget month in ISO format (e.g. 2016-12-01) (\"current\" can also be used to specify the current calendar month (UTC))
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     * @memberof MonthsApi
     */
    getBudgetMonth(budget_id: string, month: Date | string, options?: any): Promise<MonthDetailResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns all budget months
     * @summary List budget months
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     * @memberof MonthsApi
     */
    getBudgetMonths(budget_id: string, last_knowledge_of_server?: number, options?: any): Promise<MonthSummariesResponse & {
        rateLimit: string | null;
    }>;
}
/**
 * PayeeLocationsApi - fetch parameter creator
 * @export
 */
export declare const PayeeLocationsApiFetchParamCreator: (configuration: Configuration) => {
    /**
     * Returns a single payee location
     * @summary Single payee location
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} payee_location_id - id of payee location
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getPayeeLocationById(budget_id: string, payee_location_id: string, options?: any): FetchArgs;
    /**
     * Returns all payee locations
     * @summary List payee locations
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getPayeeLocations(budget_id: string, options?: any): FetchArgs;
    /**
     * Returns all payee locations for a specified payee
     * @summary List locations for a payee
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} payee_id - id of payee
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getPayeeLocationsByPayee(budget_id: string, payee_id: string, options?: any): FetchArgs;
};
/**
 * PayeeLocationsApi - functional programming interface
 * @export
 */
export declare const PayeeLocationsApiFp: (configuration: Configuration) => {
    /**
     * Returns a single payee location
     * @summary Single payee location
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} payee_location_id - id of payee location
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getPayeeLocationById(budget_id: string, payee_location_id: string, options?: any): (fetchFunction?: FetchAPI | undefined) => Promise<PayeeLocationResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns all payee locations
     * @summary List payee locations
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getPayeeLocations(budget_id: string, options?: any): (fetchFunction?: FetchAPI | undefined) => Promise<PayeeLocationsResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns all payee locations for a specified payee
     * @summary List locations for a payee
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} payee_id - id of payee
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getPayeeLocationsByPayee(budget_id: string, payee_id: string, options?: any): (fetchFunction?: FetchAPI | undefined) => Promise<PayeeLocationsResponse & {
        rateLimit: string | null;
    }>;
};
/**
 * PayeeLocationsApi - factory interface
 * @export
 */
export declare const PayeeLocationsApiFactory: (configuration: Configuration) => {
    /**
     * Returns a single payee location
     * @summary Single payee location
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} payee_location_id - id of payee location
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getPayeeLocationById(budget_id: string, payee_location_id: string, options?: any): Promise<PayeeLocationResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns all payee locations
     * @summary List payee locations
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getPayeeLocations(budget_id: string, options?: any): Promise<PayeeLocationsResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns all payee locations for a specified payee
     * @summary List locations for a payee
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} payee_id - id of payee
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getPayeeLocationsByPayee(budget_id: string, payee_id: string, options?: any): Promise<PayeeLocationsResponse & {
        rateLimit: string | null;
    }>;
};
/**
 * PayeeLocationsApi - object-oriented interface
 * @export
 * @class PayeeLocationsApi
 * @extends {BaseAPI}
 */
export declare class PayeeLocationsApi extends BaseAPI {
    /**
     * Returns a single payee location
     * @summary Single payee location
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} payee_location_id - id of payee location
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     * @memberof PayeeLocationsApi
     */
    getPayeeLocationById(budget_id: string, payee_location_id: string, options?: any): Promise<PayeeLocationResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns all payee locations
     * @summary List payee locations
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     * @memberof PayeeLocationsApi
     */
    getPayeeLocations(budget_id: string, options?: any): Promise<PayeeLocationsResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns all payee locations for a specified payee
     * @summary List locations for a payee
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} payee_id - id of payee
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     * @memberof PayeeLocationsApi
     */
    getPayeeLocationsByPayee(budget_id: string, payee_id: string, options?: any): Promise<PayeeLocationsResponse & {
        rateLimit: string | null;
    }>;
}
/**
 * PayeesApi - fetch parameter creator
 * @export
 */
export declare const PayeesApiFetchParamCreator: (configuration: Configuration) => {
    /**
     * Returns a single payee
     * @summary Single payee
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} payee_id - The id of the payee
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getPayeeById(budget_id: string, payee_id: string, options?: any): FetchArgs;
    /**
     * Returns all payees
     * @summary List payees
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getPayees(budget_id: string, last_knowledge_of_server?: number | undefined, options?: any): FetchArgs;
};
/**
 * PayeesApi - functional programming interface
 * @export
 */
export declare const PayeesApiFp: (configuration: Configuration) => {
    /**
     * Returns a single payee
     * @summary Single payee
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} payee_id - The id of the payee
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getPayeeById(budget_id: string, payee_id: string, options?: any): (fetchFunction?: FetchAPI | undefined) => Promise<PayeeResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns all payees
     * @summary List payees
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getPayees(budget_id: string, last_knowledge_of_server?: number | undefined, options?: any): (fetchFunction?: FetchAPI | undefined) => Promise<PayeesResponse & {
        rateLimit: string | null;
    }>;
};
/**
 * PayeesApi - factory interface
 * @export
 */
export declare const PayeesApiFactory: (configuration: Configuration) => {
    /**
     * Returns a single payee
     * @summary Single payee
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} payee_id - The id of the payee
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getPayeeById(budget_id: string, payee_id: string, options?: any): Promise<PayeeResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns all payees
     * @summary List payees
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getPayees(budget_id: string, last_knowledge_of_server?: number | undefined, options?: any): Promise<PayeesResponse & {
        rateLimit: string | null;
    }>;
};
/**
 * PayeesApi - object-oriented interface
 * @export
 * @class PayeesApi
 * @extends {BaseAPI}
 */
export declare class PayeesApi extends BaseAPI {
    /**
     * Returns a single payee
     * @summary Single payee
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} payee_id - The id of the payee
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     * @memberof PayeesApi
     */
    getPayeeById(budget_id: string, payee_id: string, options?: any): Promise<PayeeResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns all payees
     * @summary List payees
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     * @memberof PayeesApi
     */
    getPayees(budget_id: string, last_knowledge_of_server?: number, options?: any): Promise<PayeesResponse & {
        rateLimit: string | null;
    }>;
}
/**
 * ScheduledTransactionsApi - fetch parameter creator
 * @export
 */
export declare const ScheduledTransactionsApiFetchParamCreator: (configuration: Configuration) => {
    /**
     * Returns a single scheduled transaction
     * @summary Single scheduled transaction
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} scheduled_transaction_id - The id of the scheduled transaction
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getScheduledTransactionById(budget_id: string, scheduled_transaction_id: string, options?: any): FetchArgs;
    /**
     * Returns all scheduled transactions
     * @summary List scheduled transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getScheduledTransactions(budget_id: string, last_knowledge_of_server?: number | undefined, options?: any): FetchArgs;
};
/**
 * ScheduledTransactionsApi - functional programming interface
 * @export
 */
export declare const ScheduledTransactionsApiFp: (configuration: Configuration) => {
    /**
     * Returns a single scheduled transaction
     * @summary Single scheduled transaction
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} scheduled_transaction_id - The id of the scheduled transaction
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getScheduledTransactionById(budget_id: string, scheduled_transaction_id: string, options?: any): (fetchFunction?: FetchAPI | undefined) => Promise<ScheduledTransactionResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns all scheduled transactions
     * @summary List scheduled transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getScheduledTransactions(budget_id: string, last_knowledge_of_server?: number | undefined, options?: any): (fetchFunction?: FetchAPI | undefined) => Promise<ScheduledTransactionsResponse & {
        rateLimit: string | null;
    }>;
};
/**
 * ScheduledTransactionsApi - factory interface
 * @export
 */
export declare const ScheduledTransactionsApiFactory: (configuration: Configuration) => {
    /**
     * Returns a single scheduled transaction
     * @summary Single scheduled transaction
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} scheduled_transaction_id - The id of the scheduled transaction
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getScheduledTransactionById(budget_id: string, scheduled_transaction_id: string, options?: any): Promise<ScheduledTransactionResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns all scheduled transactions
     * @summary List scheduled transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getScheduledTransactions(budget_id: string, last_knowledge_of_server?: number | undefined, options?: any): Promise<ScheduledTransactionsResponse & {
        rateLimit: string | null;
    }>;
};
/**
 * ScheduledTransactionsApi - object-oriented interface
 * @export
 * @class ScheduledTransactionsApi
 * @extends {BaseAPI}
 */
export declare class ScheduledTransactionsApi extends BaseAPI {
    /**
     * Returns a single scheduled transaction
     * @summary Single scheduled transaction
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} scheduled_transaction_id - The id of the scheduled transaction
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     * @memberof ScheduledTransactionsApi
     */
    getScheduledTransactionById(budget_id: string, scheduled_transaction_id: string, options?: any): Promise<ScheduledTransactionResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns all scheduled transactions
     * @summary List scheduled transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     * @memberof ScheduledTransactionsApi
     */
    getScheduledTransactions(budget_id: string, last_knowledge_of_server?: number, options?: any): Promise<ScheduledTransactionsResponse & {
        rateLimit: string | null;
    }>;
}
/**
 * TransactionsApi - fetch parameter creator
 * @export
 */
export declare const TransactionsApiFetchParamCreator: (configuration: Configuration) => {
    /**
     * Creates a single transaction or multiple transactions.  If you provide a body containing a `transaction` object, a single transaction will be created and if you provide a body containing a `transactions` array, multiple transactions will be created.  Scheduled transactions cannot be created on this endpoint.
     * @summary Create a single transaction or multiple transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {PostTransactionsWrapper} data - The transaction or transactions to create.  To create a single transaction you can specify a value for the `transaction` object and to create multiple transactions you can specify an array of `transactions`.  It is expected that you will only provide a value for one of these objects.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    createTransaction(budget_id: string, data: PostTransactionsWrapper, options?: any): FetchArgs;
    /**
     * Deletes a transaction
     * @summary Deletes an existing transaction
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} transaction_id - The id of the transaction
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    deleteTransaction(budget_id: string, transaction_id: string, options?: any): FetchArgs;
    /**
     * Returns a single transaction
     * @summary Single transaction
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} transaction_id - The id of the transaction
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getTransactionById(budget_id: string, transaction_id: string, options?: any): FetchArgs;
    /**
     * Returns budget transactions
     * @summary List transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {Date} [since_date] - If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).
     * @param {&#39;uncategorized&#39; | &#39;unapproved&#39;} [type] - If specified, only transactions of the specified type will be included. \"uncategorized\" and \"unapproved\" are currently supported.
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getTransactions(budget_id: string, since_date?: string | Date | undefined, type?: "uncategorized" | "unapproved" | undefined, last_knowledge_of_server?: number | undefined, options?: any): FetchArgs;
    /**
     * Returns all transactions for a specified account
     * @summary List account transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} account_id - The id of the account
     * @param {Date} [since_date] - If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).
     * @param {&#39;uncategorized&#39; | &#39;unapproved&#39;} [type] - If specified, only transactions of the specified type will be included. \"uncategorized\" and \"unapproved\" are currently supported.
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getTransactionsByAccount(budget_id: string, account_id: string, since_date?: string | Date | undefined, type?: "uncategorized" | "unapproved" | undefined, last_knowledge_of_server?: number | undefined, options?: any): FetchArgs;
    /**
     * Returns all transactions for a specified category
     * @summary List category transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} category_id - The id of the category
     * @param {Date} [since_date] - If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).
     * @param {&#39;uncategorized&#39; | &#39;unapproved&#39;} [type] - If specified, only transactions of the specified type will be included. \"uncategorized\" and \"unapproved\" are currently supported.
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getTransactionsByCategory(budget_id: string, category_id: string, since_date?: string | Date | undefined, type?: "uncategorized" | "unapproved" | undefined, last_knowledge_of_server?: number | undefined, options?: any): FetchArgs;
    /**
     * Returns all transactions for a specified payee
     * @summary List payee transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} payee_id - The id of the payee
     * @param {Date} [since_date] - If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).
     * @param {&#39;uncategorized&#39; | &#39;unapproved&#39;} [type] - If specified, only transactions of the specified type will be included. \"uncategorized\" and \"unapproved\" are currently supported.
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getTransactionsByPayee(budget_id: string, payee_id: string, since_date?: string | Date | undefined, type?: "uncategorized" | "unapproved" | undefined, last_knowledge_of_server?: number | undefined, options?: any): FetchArgs;
    /**
     * Imports available transactions on all linked accounts for the given budget.  Linked accounts allow transactions to be imported directly from a specified financial institution and this endpoint initiates that import.  Sending a request to this endpoint is the equivalent of clicking \"Import\" on each account in the web application or tapping the \"New Transactions\" banner in the mobile applications.  The response for this endpoint contains the transaction ids that have been imported.
     * @summary Import transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    importTransactions(budget_id: string, options?: any): FetchArgs;
    /**
     * Updates a single transaction
     * @summary Updates an existing transaction
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} transaction_id - The id of the transaction
     * @param {PutTransactionWrapper} data - The transaction to update
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    updateTransaction(budget_id: string, transaction_id: string, data: PutTransactionWrapper, options?: any): FetchArgs;
    /**
     * Updates multiple transactions, by `id` or `import_id`.
     * @summary Update multiple transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {PatchTransactionsWrapper} data - The transactions to update. Each transaction must have either an `id` or `import_id` specified. If `id` is specified as null an `import_id` value can be provided which will allow transaction(s) to be updated by their `import_id`. If an `id` is specified, it will always be used for lookup.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    updateTransactions(budget_id: string, data: PatchTransactionsWrapper, options?: any): FetchArgs;
};
/**
 * TransactionsApi - functional programming interface
 * @export
 */
export declare const TransactionsApiFp: (configuration: Configuration) => {
    /**
     * Creates a single transaction or multiple transactions.  If you provide a body containing a `transaction` object, a single transaction will be created and if you provide a body containing a `transactions` array, multiple transactions will be created.  Scheduled transactions cannot be created on this endpoint.
     * @summary Create a single transaction or multiple transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {PostTransactionsWrapper} data - The transaction or transactions to create.  To create a single transaction you can specify a value for the `transaction` object and to create multiple transactions you can specify an array of `transactions`.  It is expected that you will only provide a value for one of these objects.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    createTransaction(budget_id: string, data: PostTransactionsWrapper, options?: any): (fetchFunction?: FetchAPI | undefined) => Promise<SaveTransactionsResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Deletes a transaction
     * @summary Deletes an existing transaction
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} transaction_id - The id of the transaction
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    deleteTransaction(budget_id: string, transaction_id: string, options?: any): (fetchFunction?: FetchAPI | undefined) => Promise<TransactionResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns a single transaction
     * @summary Single transaction
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} transaction_id - The id of the transaction
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getTransactionById(budget_id: string, transaction_id: string, options?: any): (fetchFunction?: FetchAPI | undefined) => Promise<TransactionResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns budget transactions
     * @summary List transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {Date} [since_date] - If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).
     * @param {&#39;uncategorized&#39; | &#39;unapproved&#39;} [type] - If specified, only transactions of the specified type will be included. \"uncategorized\" and \"unapproved\" are currently supported.
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getTransactions(budget_id: string, since_date?: string | Date | undefined, type?: "uncategorized" | "unapproved" | undefined, last_knowledge_of_server?: number | undefined, options?: any): (fetchFunction?: FetchAPI | undefined) => Promise<TransactionsResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns all transactions for a specified account
     * @summary List account transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} account_id - The id of the account
     * @param {Date} [since_date] - If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).
     * @param {&#39;uncategorized&#39; | &#39;unapproved&#39;} [type] - If specified, only transactions of the specified type will be included. \"uncategorized\" and \"unapproved\" are currently supported.
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getTransactionsByAccount(budget_id: string, account_id: string, since_date?: string | Date | undefined, type?: "uncategorized" | "unapproved" | undefined, last_knowledge_of_server?: number | undefined, options?: any): (fetchFunction?: FetchAPI | undefined) => Promise<TransactionsResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns all transactions for a specified category
     * @summary List category transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} category_id - The id of the category
     * @param {Date} [since_date] - If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).
     * @param {&#39;uncategorized&#39; | &#39;unapproved&#39;} [type] - If specified, only transactions of the specified type will be included. \"uncategorized\" and \"unapproved\" are currently supported.
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getTransactionsByCategory(budget_id: string, category_id: string, since_date?: string | Date | undefined, type?: "uncategorized" | "unapproved" | undefined, last_knowledge_of_server?: number | undefined, options?: any): (fetchFunction?: FetchAPI | undefined) => Promise<HybridTransactionsResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns all transactions for a specified payee
     * @summary List payee transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} payee_id - The id of the payee
     * @param {Date} [since_date] - If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).
     * @param {&#39;uncategorized&#39; | &#39;unapproved&#39;} [type] - If specified, only transactions of the specified type will be included. \"uncategorized\" and \"unapproved\" are currently supported.
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getTransactionsByPayee(budget_id: string, payee_id: string, since_date?: string | Date | undefined, type?: "uncategorized" | "unapproved" | undefined, last_knowledge_of_server?: number | undefined, options?: any): (fetchFunction?: FetchAPI | undefined) => Promise<HybridTransactionsResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Imports available transactions on all linked accounts for the given budget.  Linked accounts allow transactions to be imported directly from a specified financial institution and this endpoint initiates that import.  Sending a request to this endpoint is the equivalent of clicking \"Import\" on each account in the web application or tapping the \"New Transactions\" banner in the mobile applications.  The response for this endpoint contains the transaction ids that have been imported.
     * @summary Import transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    importTransactions(budget_id: string, options?: any): (fetchFunction?: FetchAPI | undefined) => Promise<TransactionsImportResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Updates a single transaction
     * @summary Updates an existing transaction
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} transaction_id - The id of the transaction
     * @param {PutTransactionWrapper} data - The transaction to update
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    updateTransaction(budget_id: string, transaction_id: string, data: PutTransactionWrapper, options?: any): (fetchFunction?: FetchAPI | undefined) => Promise<TransactionResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Updates multiple transactions, by `id` or `import_id`.
     * @summary Update multiple transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {PatchTransactionsWrapper} data - The transactions to update. Each transaction must have either an `id` or `import_id` specified. If `id` is specified as null an `import_id` value can be provided which will allow transaction(s) to be updated by their `import_id`. If an `id` is specified, it will always be used for lookup.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    updateTransactions(budget_id: string, data: PatchTransactionsWrapper, options?: any): (fetchFunction?: FetchAPI | undefined) => Promise<SaveTransactionsResponse & {
        rateLimit: string | null;
    }>;
};
/**
 * TransactionsApi - factory interface
 * @export
 */
export declare const TransactionsApiFactory: (configuration: Configuration) => {
    /**
     * Creates a single transaction or multiple transactions.  If you provide a body containing a `transaction` object, a single transaction will be created and if you provide a body containing a `transactions` array, multiple transactions will be created.  Scheduled transactions cannot be created on this endpoint.
     * @summary Create a single transaction or multiple transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {PostTransactionsWrapper} data - The transaction or transactions to create.  To create a single transaction you can specify a value for the `transaction` object and to create multiple transactions you can specify an array of `transactions`.  It is expected that you will only provide a value for one of these objects.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    createTransaction(budget_id: string, data: PostTransactionsWrapper, options?: any): Promise<SaveTransactionsResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Deletes a transaction
     * @summary Deletes an existing transaction
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} transaction_id - The id of the transaction
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    deleteTransaction(budget_id: string, transaction_id: string, options?: any): Promise<TransactionResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns a single transaction
     * @summary Single transaction
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} transaction_id - The id of the transaction
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getTransactionById(budget_id: string, transaction_id: string, options?: any): Promise<TransactionResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns budget transactions
     * @summary List transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {Date} [since_date] - If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).
     * @param {&#39;uncategorized&#39; | &#39;unapproved&#39;} [type] - If specified, only transactions of the specified type will be included. \"uncategorized\" and \"unapproved\" are currently supported.
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getTransactions(budget_id: string, since_date?: string | Date | undefined, type?: "uncategorized" | "unapproved" | undefined, last_knowledge_of_server?: number | undefined, options?: any): Promise<TransactionsResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns all transactions for a specified account
     * @summary List account transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} account_id - The id of the account
     * @param {Date} [since_date] - If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).
     * @param {&#39;uncategorized&#39; | &#39;unapproved&#39;} [type] - If specified, only transactions of the specified type will be included. \"uncategorized\" and \"unapproved\" are currently supported.
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getTransactionsByAccount(budget_id: string, account_id: string, since_date?: string | Date | undefined, type?: "uncategorized" | "unapproved" | undefined, last_knowledge_of_server?: number | undefined, options?: any): Promise<TransactionsResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns all transactions for a specified category
     * @summary List category transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} category_id - The id of the category
     * @param {Date} [since_date] - If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).
     * @param {&#39;uncategorized&#39; | &#39;unapproved&#39;} [type] - If specified, only transactions of the specified type will be included. \"uncategorized\" and \"unapproved\" are currently supported.
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getTransactionsByCategory(budget_id: string, category_id: string, since_date?: string | Date | undefined, type?: "uncategorized" | "unapproved" | undefined, last_knowledge_of_server?: number | undefined, options?: any): Promise<HybridTransactionsResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns all transactions for a specified payee
     * @summary List payee transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} payee_id - The id of the payee
     * @param {Date} [since_date] - If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).
     * @param {&#39;uncategorized&#39; | &#39;unapproved&#39;} [type] - If specified, only transactions of the specified type will be included. \"uncategorized\" and \"unapproved\" are currently supported.
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getTransactionsByPayee(budget_id: string, payee_id: string, since_date?: string | Date | undefined, type?: "uncategorized" | "unapproved" | undefined, last_knowledge_of_server?: number | undefined, options?: any): Promise<HybridTransactionsResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Imports available transactions on all linked accounts for the given budget.  Linked accounts allow transactions to be imported directly from a specified financial institution and this endpoint initiates that import.  Sending a request to this endpoint is the equivalent of clicking \"Import\" on each account in the web application or tapping the \"New Transactions\" banner in the mobile applications.  The response for this endpoint contains the transaction ids that have been imported.
     * @summary Import transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    importTransactions(budget_id: string, options?: any): Promise<TransactionsImportResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Updates a single transaction
     * @summary Updates an existing transaction
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} transaction_id - The id of the transaction
     * @param {PutTransactionWrapper} data - The transaction to update
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    updateTransaction(budget_id: string, transaction_id: string, data: PutTransactionWrapper, options?: any): Promise<TransactionResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Updates multiple transactions, by `id` or `import_id`.
     * @summary Update multiple transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {PatchTransactionsWrapper} data - The transactions to update. Each transaction must have either an `id` or `import_id` specified. If `id` is specified as null an `import_id` value can be provided which will allow transaction(s) to be updated by their `import_id`. If an `id` is specified, it will always be used for lookup.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    updateTransactions(budget_id: string, data: PatchTransactionsWrapper, options?: any): Promise<SaveTransactionsResponse & {
        rateLimit: string | null;
    }>;
};
/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
export declare class TransactionsApi extends BaseAPI {
    /**
     * Creates a single transaction or multiple transactions.  If you provide a body containing a `transaction` object, a single transaction will be created and if you provide a body containing a `transactions` array, multiple transactions will be created.  Scheduled transactions cannot be created on this endpoint.
     * @summary Create a single transaction or multiple transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {PostTransactionsWrapper} data - The transaction or transactions to create.  To create a single transaction you can specify a value for the `transaction` object and to create multiple transactions you can specify an array of `transactions`.  It is expected that you will only provide a value for one of these objects.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    createTransaction(budget_id: string, data: PostTransactionsWrapper, options?: any): Promise<SaveTransactionsResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Deletes a transaction
     * @summary Deletes an existing transaction
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} transaction_id - The id of the transaction
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    deleteTransaction(budget_id: string, transaction_id: string, options?: any): Promise<TransactionResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns a single transaction
     * @summary Single transaction
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} transaction_id - The id of the transaction
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    getTransactionById(budget_id: string, transaction_id: string, options?: any): Promise<TransactionResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns budget transactions
     * @summary List transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {Date} [since_date] - If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).
     * @param {&#39;uncategorized&#39; | &#39;unapproved&#39;} [type] - If specified, only transactions of the specified type will be included. \"uncategorized\" and \"unapproved\" are currently supported.
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    getTransactions(budget_id: string, since_date?: Date | string, type?: 'uncategorized' | 'unapproved', last_knowledge_of_server?: number, options?: any): Promise<TransactionsResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns all transactions for a specified account
     * @summary List account transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} account_id - The id of the account
     * @param {Date} [since_date] - If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).
     * @param {&#39;uncategorized&#39; | &#39;unapproved&#39;} [type] - If specified, only transactions of the specified type will be included. \"uncategorized\" and \"unapproved\" are currently supported.
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    getTransactionsByAccount(budget_id: string, account_id: string, since_date?: Date | string, type?: 'uncategorized' | 'unapproved', last_knowledge_of_server?: number, options?: any): Promise<TransactionsResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns all transactions for a specified category
     * @summary List category transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} category_id - The id of the category
     * @param {Date} [since_date] - If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).
     * @param {&#39;uncategorized&#39; | &#39;unapproved&#39;} [type] - If specified, only transactions of the specified type will be included. \"uncategorized\" and \"unapproved\" are currently supported.
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    getTransactionsByCategory(budget_id: string, category_id: string, since_date?: Date | string, type?: 'uncategorized' | 'unapproved', last_knowledge_of_server?: number, options?: any): Promise<HybridTransactionsResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Returns all transactions for a specified payee
     * @summary List payee transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} payee_id - The id of the payee
     * @param {Date} [since_date] - If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).
     * @param {&#39;uncategorized&#39; | &#39;unapproved&#39;} [type] - If specified, only transactions of the specified type will be included. \"uncategorized\" and \"unapproved\" are currently supported.
     * @param {number} [last_knowledge_of_server] - The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    getTransactionsByPayee(budget_id: string, payee_id: string, since_date?: Date | string, type?: 'uncategorized' | 'unapproved', last_knowledge_of_server?: number, options?: any): Promise<HybridTransactionsResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Imports available transactions on all linked accounts for the given budget.  Linked accounts allow transactions to be imported directly from a specified financial institution and this endpoint initiates that import.  Sending a request to this endpoint is the equivalent of clicking \"Import\" on each account in the web application or tapping the \"New Transactions\" banner in the mobile applications.  The response for this endpoint contains the transaction ids that have been imported.
     * @summary Import transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    importTransactions(budget_id: string, options?: any): Promise<TransactionsImportResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Updates a single transaction
     * @summary Updates an existing transaction
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {string} transaction_id - The id of the transaction
     * @param {PutTransactionWrapper} data - The transaction to update
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    updateTransaction(budget_id: string, transaction_id: string, data: PutTransactionWrapper, options?: any): Promise<TransactionResponse & {
        rateLimit: string | null;
    }>;
    /**
     * Updates multiple transactions, by `id` or `import_id`.
     * @summary Update multiple transactions
     * @param {string} budget_id - The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
     * @param {PatchTransactionsWrapper} data - The transactions to update. Each transaction must have either an `id` or `import_id` specified. If `id` is specified as null an `import_id` value can be provided which will allow transaction(s) to be updated by their `import_id`. If an `id` is specified, it will always be used for lookup.
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    updateTransactions(budget_id: string, data: PatchTransactionsWrapper, options?: any): Promise<SaveTransactionsResponse & {
        rateLimit: string | null;
    }>;
}
/**
 * UserApi - fetch parameter creator
 * @export
 */
export declare const UserApiFetchParamCreator: (configuration: Configuration) => {
    /**
     * Returns authenticated user information
     * @summary User info
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getUser(options?: any): FetchArgs;
};
/**
 * UserApi - functional programming interface
 * @export
 */
export declare const UserApiFp: (configuration: Configuration) => {
    /**
     * Returns authenticated user information
     * @summary User info
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getUser(options?: any): (fetchFunction?: FetchAPI | undefined) => Promise<UserResponse & {
        rateLimit: string | null;
    }>;
};
/**
 * UserApi - factory interface
 * @export
 */
export declare const UserApiFactory: (configuration: Configuration) => {
    /**
     * Returns authenticated user information
     * @summary User info
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     */
    getUser(options?: any): Promise<UserResponse & {
        rateLimit: string | null;
    }>;
};
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export declare class UserApi extends BaseAPI {
    /**
     * Returns authenticated user information
     * @summary User info
     * @param {*} [options] - Override http request options.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUser(options?: any): Promise<UserResponse & {
        rateLimit: string | null;
    }>;
}
